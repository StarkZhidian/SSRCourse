{"contentList": [{"basicData":{"text":"\n链表(Linked list)是一种常见的基础数据结构，是一种线性结构。\n\n其储存特点是：用一组任意的储存单元储存线性表的数据元素，\n这些储存单元的物理内存地址可以是连续的，也可以是不连续的，\n因此，为了表示每个数据元素和其后继数据元素的逻辑关系，\n我们还需要一个变量来储存其直接后继数据的位置，\n实际操作中其实就是通过指针来保存其直接后继数据的地址，\n这两个部分共同组成一个数据元素，称其为 \"节点\"。\n\n其中储存数据元素信息的部分称为\"数据域\"，\n储存直接后继储存位置的部分称为\"指针域\"。\n\n单向链表是链表的一种，\n假设现在有 1~5 5个数字需要使用单向链表储存，\n那么这个单向链表的储存结构图就会是这样的：\n\t\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_7.png"},"contentType":1},{"basicData":{"text":"\n图中的箭头代表节点的指针指向代表当前节点的下一个节点地址，\n请注意，虽然图中相邻的两个节点看似物理内存地址也相邻，\n但是实际上不一定，关于这一点会在\"代码实现\"部分验证。\n\n关于单向链表的创建，有两种方法：前插法和后插法，首先看一下后插法：\n先创建一个节点作为链表的开始节点，我们称其为\"头结点\"，\n我们一般会用头结点的数据去储存一些关于链表的一些信息，比如链表的节点个数\n之后每创建一个节点就将其插入到链表的最后作为链表的尾节点。\n\n前插法和后插法的思想相似，只是节点的插入方向不同，前插法是先创建尾节点，\n然后每创建一个节点就将其插入到链表的开头。\n\n两种方法的时间复杂度都是O(n)。\n关于节点的访问操作，\n由于单链表逻辑上相邻节点的物理内存地址不相邻的这个特性，\n访问特定值的节点需要从链表的头结点开始遍历，\n直到找到该节点，整个过程的时间复杂度为 O(n)。\n\n对于插入节点操作来说，先要从头开始找到要插入的位置，然后进行插入节点操作，\n删除节点操作和插入节点操作类似，也先要找到删除的节点的位置，然后再进行删除操作。\n\n因此，单链表的插入节点操作和删除节点操作的时间复杂度都是O(n)。\n\n如果要深入理解单向链表的相关操作，请参考\"动画演示\"和代码实现部分。\n\n\t\t"},"contentType":0},{"basicData":{"animation_name":"线性结构:单向链表"},"contentType":4},{"basicData":{"code":"\n\n/**\n * 单向链表的相关操作，C语言程序，没有实现封装。\n \n * 包括：单向链表的创建、查看节点地址、输出链表内容、删除节点、插入节点\n * 这里队列元素储存的数据类型为 int 类型，没有使用 typedef 关键字，如有需要请自行更改\n * Author：指点 \n */\n#include <stdio.h>\n#include <stdlib.h>\n\n// 链表节点的结构体，包含数据部分和指针部分(指向下一个节点的地址) \ntypedef struct Node {\n\tint data;\n\tstruct Node *next;\n}Node;\n\n// 定义链表的头结点 \nNode *headNode = NULL;  \n\n// 创建链表 \nvoid createLinkList() {\n\tint data;\n\t// 为链表的头结点申请内存空间 \n\theadNode = (Node *) malloc(sizeof(Node));\n\t// 头结点的 data 用于储存链表的节点总数(包括头结点)\n\theadNode->data = 1; \n\theadNode->next = NULL;\n\t// 当前要创建的节点的指针 \n\tNode *node = NULL;\n\t/* 这个指针一直指向当前要创建的节点的前一个节点，\n\t * 随着节点的创建它会慢慢向后移，用于连接当前要创建的节点\n\t */ \n\tNode *prior = headNode; \n\tprintf(\"请输入要创建的节点数据，输入 -1 代表结束创建节点:\\n\"); \n\tdo {\n\t\tscanf(\"%d\", &data);\n\t\t// 如果输入的是 -1 则跳出循环 \n\t\tif(data == -1) {\n\t\t\tbreak;\n\t\t}\n\t\t// 为当前要创建的节点申请内存空间并且进行数据赋值 \n\t\tnode = (Node *) malloc(sizeof(Node));\n\t\tnode->data = data; \n\t\tnode->next = NULL;\n\t\tprior->next = node;\n\t\t// 链表总的节点数加一 \n\t\theadNode->data++;  \n\t\t/* 将前节点指针后移，保证每次创建新的节点的时候它都在新的节点的前一个节点位置，\n\t\t用于连接这个新的节点到链表的尾部 */ \n\t\tprior = node;\n\t} while(1); \n}\n\n// 输出链表的每个节点的内存地址 \nvoid printAddress() {\n\tprintf(\"当前链表中的节点的物理地址为：\\n\");\n\tNode *startNode = headNode;\n\twhile(startNode != NULL) {\n\t\tprintf(\"%d \", startNode);\n\t\tstartNode = startNode->next;\n\t} \n} \n\n// 输出链表的所有节点数据 \nvoid printLinkList() {\n\tprintf(\"\\n当前链表的节点总数(包括头结点)：%d\\n\", headNode->data);\n\tNode *startNode = headNode->next;\n\tprintf(\"当前链表内容：headNode --> \");\n\t// 当节点不为空的时候输出节点内容 \n\twhile(startNode != NULL) {\n\t\tprintf(\"%d --> \", startNode->data);\n\t\tstartNode = startNode->next; \n\t} \n\tprintf(\"NULL\\n\");\n}\n\n// 删除链表指定位置的节点 \nvoid deleteNode() {\n\tint i;\n\tint position;\n\t// 定义要删除的节点 \n\tNode *deleteNode = headNode->next;\n\t// 定义要删除的节点的前一个位置的节点，用于连接要删除的节点的之后的节点 \n\tNode *priorNode = headNode; \n\t// 如果链表里面只有一个头结点，那么直接返回(头结点不可删除) \n\tif(headNode->data == 1) {\n\t\treturn ;\n\t} \n\tprintf(\"输入要删除的节点位置(1~%d):\", headNode->data-1); \n\tscanf(\"%d\", &position);\n\tif(position < 1 || position > headNode->data-1) {\n\t\tprintf(\"位置输入错误！\");\n\t\treturn ;\n\t}\n\t// 找到要删除的节点 \n\tfor(i = 1; i < position && deleteNode != NULL; i++) {\n\t\tdeleteNode = deleteNode->next;\n\t\tpriorNode = priorNode->next;\n\t}\n\t// 如果节点不为空，那么删除这个节点 \n\tif(deleteNode != NULL) {\n\t\tpriorNode->next = deleteNode->next;\n\t\t// 将指针指向空并且回收这个节点的内存空间 \t\t\n\t\tdeleteNode->next = NULL; \n\t\tfree(deleteNode);\n\t\t// 链表的节点总数减一 \n\t\theadNode->data--;\n\t}\n} \n\n// 向链表的指定位置插入节点 \nvoid insertNode() {\n\t// 定义要插入的节点、插入位置和数据值 \n\tNode *insertNode = NULL;\n\tint position, data;\n\tint i; \n\t// 定义要插入的节点的前一个位置的节点，用于连接要插入的节点的之后的节点 \n\tNode *priorNode = headNode;\n\t\n\tprintf(\"输入节点的插入位置(1~%d)和数据值：\", headNode->data);\n\tscanf(\"%d %d\", &position, &data);\n\tif(position < 1 || position > headNode->data) {\n\t\tprintf(\"位置输入错误！\");\n\t\treturn ;\n\t}\n\t// 为要插入的节点申请内存空间 \n\tinsertNode = (Node *) malloc(sizeof(Node));\n\tinsertNode->data = data;\n\t// 找到节点的插入位置 \n\tfor(i = 1; i < position && priorNode != NULL; i++) {\n\t\tpriorNode = priorNode->next; \n\t}\n\t// 进行节点插入 \n\tif(priorNode != NULL) {\n\t\tinsertNode->next = priorNode->next;\n\t\tpriorNode->next = insertNode;\n\t\t// 链表节点总数加一 \n\t\theadNode->data++;\n\t}\n} \n\nint main() {\n\t// 创建链表 \n\tcreateLinkList(); \n\t// 输出所有链表节点的地址 \n\tprintAddress(); \n\t// 输出链表所有的节点数据 \n//\tprintLinkList(); \n\t// 删除链表节点 \n//\tdeleteNode();\n\t// 输出链表所有的节点数据 \n//\tprintLinkList(); \n\t// 向链表中插入新节点\n//\tinsertNode(); \n\t// 输出链表所有的节点数据 \n//\tprintLinkList(); \n\t\n\treturn 0;\n}\n\t\t","code_language":-1},"contentType":2},{"basicData":{"text":"\n代码看似长，但其实就那么几个操作，只是这里把单向链表的一些操作都放在一个文件中实现了，\n主要是单向链表的创建、查看节点地址、输出链表内容、删除节点、插入节点 。\n\n这里采用的是上文说的\"后插法\"创建链表。\n主要是针对节点的链接操作。\n\nmain 函数中先把其他操作注释了，这样是为了更好的观察链表中的节点的内存地址情况，\n我们来看一下程序结果：\n\t\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_8.png"},"contentType":1},{"basicData":{"text":"\n我们可以看到，链表中逻辑上相邻的节点物理内存地址并不都是相邻的，\n这样也验证了在\"基本概念\"里面提到的物理内存地址不一定相邻的说法。\n\n并且相对于顺序表来说，链表的内存空间是：来一个元素申请一个内存空间，\n即不存在内存空间的浪费现象，但是操作相对于顺序表复杂，\n所以大家根据需要选择。\n让我们把 main 函数中的一些方法的注释去掉：\n\t\t"},"contentType":0},{"basicData":{"code":"\nint main() {\n\t// 创建链表 \n\tcreateLinkList(); \n\t// 输出所有链表节点的地址 \n\tprintAddress(); \n\t// 输出链表所有的节点数据 \n\tprintLinkList(); \n\t// 删除链表节点 \n\tdeleteNode();\n\t// 输出链表所有的节点数据 \n\tprintLinkList(); \n\t// 向链表中插入新节点\n\tinsertNode(); \n\t// 输出链表所有的节点数据 \n\tprintLinkList(); \n\t\n\treturn 0;\n}\n\t\t","code_language":-1},"contentType":2},{"basicData":{"text":"\n再来看一下结果：\n\t\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_9.png"},"contentType":1},{"basicData":{"text":"\n因为我们的链表的内存空间是动态申请的，所以两次运行结果中链表的节点的物理内存地址不一样，\n但是它们同样是不相邻的，ok，让我们继续：\n\t\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_10.png"},"contentType":1},{"basicData":{"image_url":"xianxingjiegou_11.png"},"contentType":1},{"basicData":{"text":"\n1、尝试使用\"前插法\"创建单向链表。\n\n2、尝试将一个单向链表逆转(逆转链表储存数据的顺序，\n   比如：1->2->3->4->5 转换为 5->4->3->2->1)\n\t\t"},"contentType":0},{"basicData":{"text":"\n双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，\n分别指向直接后继和直接前驱。\n所以，从双向链表中的任意一个结点开始，\n都可以很方便地访问它的前驱结点和后继结点。\n\n假设现在要使用双向链表来储存 1~5 这 5 个数据，那么其对应的内存结构图：\n\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_12.png"},"contentType":1},{"basicData":{"text":"\n对于双向链表来说，指定了某个节点后，\n访问它的直接前驱节点和直接后继节点都只需要移动一次指针就行了。\n\n时间复杂度都是O(1)，对于单链表来说，访问直接后继节点的需要移动一次指针，\n时间复杂度为O(1)，但是访问直接前驱节点则需要从单链表头结点开始遍历，\n时间复杂度为O(n)，关于这点，可以参考\"单向链表\"的内存结构图。\n\n双向链表的相关操作和单链表类似(创建、删除节点、插入节点...)。\n\n创建、删除节点和插入节点操作的时间复杂度均为O(n)，\n和单链表不同的是，单链表在进行这些操作的时候只需要操作每个节点唯一一个指针。\n\n而双向链表的节点有两个指针，因此操作的时候需要对着两个指针进行处理。\n\n关于双向链表的相关操作，请参考\"动画演示\"部分和\"代码实现\"部分。\n\n\t"},"contentType":0},{"basicData":{},"contentType":4},{"basicData":{"code":"\n\n/**\n* 双向链表的相关操作，C语言程序，没有实现封装。\n \n* 包括：双向链表的创建、输出链表内容、删除节点、插入节点\n* 这里队列元素储存的数据类型为 int 类型，没有使用 typedef 关键字，如有需要请自行更改\n* Author：指点 \n*/\n#include <stdio.h>\n#include <stdlib.h>\n\n// 声明链表，包括指向直接前驱节点的指针、数据部分、指向直接后继节点的指针 \ntypedef struct Node {\nstruct Node *prior;\nint data;\nstruct Node *next;\n}Node;\n\n// 定义链表的头结点 \nNode *headNode = NULL; \n\n// 创建链表 \nvoid createLinkList() {\nint data;\n// 为链表的头结点申请内存空间 \nheadNode = (Node *) malloc(sizeof(Node));\n// 头结点的 data 用于储存链表的节点总数(包括头结点)\nheadNode->data = 1; \nheadNode->next = NULL;\n// 当前要创建的节点的指针 \nNode *node = NULL;\n/* 这个指针一直指向当前要创建的节点的前一个节点，\n * 随着节点的创建它会慢慢向后移，用于连接当前要创建的节点\n */ \nNode *prior = headNode; \nprintf(\"请输入要创建的节点数据，输入 -1 代表结束创建节点:\\n\"); \ndo {\n\tscanf(\"%d\", &data);\n\t// 如果输入的是 -1 则跳出循环 \n\tif(data == -1) {\n\t\tbreak;\n\t}\n\t// 为当前要创建的节点申请内存空间并且进行数据赋值 \n\tnode = (Node *) malloc(sizeof(Node));\n\tnode->data = data; \n\tnode->next = NULL;\n\t// 进行链表节点的连接 \n\tprior->next = node;\n\tnode->prior = prior;\n\t// 链表总的节点数加一 \n\theadNode->data++;  \n\t/* 将前节点指针后移，保证每次创建新的节点的时候它都在新的节点的前一个节点位置，\n\t用于连接这个新的节点到链表的尾部 */ \n\tprior = node;\n}while(1); \n}\n\n// 输出链表的所有节点数据 \nvoid printLinkList() {\nprintf(\"\\n当前链表的节点总数(包括头结点)：%d\\n\", headNode->data);\nNode *startNode = headNode->next;\nprintf(\"当前链表内容：headNode --> \");\n// 当节点不为空的时候输出节点内容 \nwhile(startNode != NULL) {\n\tprintf(\"<-- %d --> \", startNode->data);\n\tstartNode = startNode->next; \n} \nprintf(\"NULL\\n\");\n}\n\n// 删除链表指定位置的节点 \nvoid deleteNode() {\nint i;\nint position;\n// 定义要删除的节点 \nNode *deleteNode = headNode->next;\n// 定义要删除的节点的前一个位置的节点，用于连接要删除的节点的之后的节点 \nNode *priorNode = headNode; \n// 如果链表里面只有一个头结点，那么直接返回(头结点不可删除) \nif(headNode->data == 1) {\n\treturn ;\n} \nprintf(\"输入要删除的节点位置(1~%d):\", headNode->data-1); \nscanf(\"%d\", &position);\nif(position < 1 || position > headNode->data-1) {\n\tprintf(\"位置输入错误！\");\n\treturn ;\n}\n// 找到要删除的节点 \nfor(i = 1; i < position && deleteNode != NULL; i++) {\n\tdeleteNode = deleteNode->next;\n\tpriorNode = priorNode->next;\n}\n// 如果节点不为空，那么删除这个节点 \nif(deleteNode != NULL) {\n\t// 改变前后节点的指针指向 \n\tpriorNode->next = deleteNode->next;\n\t// 防止删除的节点是最后一个节点导致内存泄漏 \n\tif(deleteNode->next != NULL) {\n\t\tdeleteNode->next->prior = priorNode;\n\t}\n\t// 将指针指向空并且回收这个节点的内存空间 \t\t\n\tdeleteNode->next = NULL; \n\tdeleteNode->prior = NULL;\n\tfree(deleteNode);\n\t// 链表的节点总数减一 \n\theadNode->data--;\n}\n} \n\n// 向链表的指定位置插入节点 \nvoid insertNode() {\n// 定义要插入的节点、插入位置和数据值 \nNode *insertNode = NULL;\nint position, data;\nint i; \n// 定义要插入的节点的前一个位置的节点，用于连接要插入的节点的之后的节点 \nNode *priorNode = headNode;\n\nprintf(\"输入节点的插入位置(1~%d)和数据值：\", headNode->data);\nscanf(\"%d %d\", &position, &data);\nif(position < 1 || position > headNode->data) {\n\tprintf(\"位置输入错误！\");\n\treturn ;\n}\n// 为要插入的节点申请内存空间 \ninsertNode = (Node *) malloc(sizeof(Node));\ninsertNode->data = data;\n// 找到节点的插入位置 \nfor(i = 1; i < position && priorNode != NULL; i++) {\n\tpriorNode = priorNode->next; \n}\n// 进行节点插入 \nif(priorNode != NULL) {\n\t// 改变前后节点的指针指向 \n\tinsertNode->next = priorNode->next;\n\t// 防止插入的节点是最后一个节点导致内存泄漏 \n\tif(insertNode->next != NULL) {\n\t\tinsertNode->next->prior = insertNode; \n\t}\n\tpriorNode->next = insertNode;\n\tinsertNode->prior = priorNode;\n\t// 链表节点总数加一 \n\theadNode->data++;\n}\n} \n\nint main() {\n\n// 创建链表 \ncreateLinkList(); \n// 输出链表所有的节点数据 \nprintLinkList(); \n// 删除链表节点 \ndeleteNode();\n// 输出链表所有的节点数据 \nprintLinkList(); \n// 向链表中插入新节点\ninsertNode();\n// 输出链表所有的节点数据 \nprintLinkList(); \n\nreturn 0;\n} \n\t","code_language":-1},"contentType":2},{"basicData":{"text":"\n代码逻辑和单向链表的相关操作差不多，只是双向链表的每个节点都有两个指针，\n所以在创建链表连接节点、删除节点和插入节点的过程需要注意对两个指针的处理，\n还需要注意的是对于特殊性情况的处理(对头节点、尾节点插入和删除的过程)，\n因为头节点无直接前驱，尾节点无直接后继，处理的时候要防止内存泄漏。下面看看结果：\n\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_13.png"},"contentType":1},{"basicData":{"image_url":"xianxingjiegou_14.png"},"contentType":1},{"basicData":{"image_url":"xianxingjiegou_15.png"},"contentType":1},{"basicData":{"text":"\n上面三张图分别演示了双向链表的创建、删除节点、插入节点的操作，\n三个操作的时间复杂度都是O(n)，这点和单链表一致，相对于单链表的优点是：\n双链表可以直接访问一个节点的直接前驱节点(时间复杂度为O(1))，\n而单链表必须要从头开始移动指针，直到到达指定位置，时间复杂度为O(n)。\n\n\t"},"contentType":0},{"basicData":{"text":"\n循环链表是另一种形式的链式存贮结构。\n它的特点是表中最后一个结点的指针域指向头结点，\n整个链表形成一个环。\n因此，从链表中任何一个节点出发均可到达表中的其他节点。\n\n在单链表中，从一已知结点出发，只能访问到该结点及其后续结点，\n无法找到该结点之前的其它结点。\n而在单循环链表中，\n从任一结点出发都可访问到表中所有结点。\n这一优点使某些运算在单循环链表上易于实现\n下面是循环链表的内存结构图(包括循环单链表和循环双链表):\n\n\t\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_16.png"},"contentType":1},{"basicData":{"text":"\n循环链表类似于串起来的珠子，无论从哪个珠子开始数，照着某个方向，\n一定可以将这串珠子都数完，这和遍历整个循环链表的思想是一样的。\n\n循环单链表和单链表操作基本一致，区别在于：\n\n循环链表中没有NULL指针。\n遍历链表的时候，判断当前指针到达表尾的条件不同，\n单链表通过 p!=NULL 或者 p-<!=NULL 来进行的，即判断当前指针是否为空，\n而循环链表是判断当前指针地址是否等于某\"特定指针\"来进行的。\n\n这个\"特定指针\"取决于你选择的开始遍历链表的那个节点，\n对比单链表和循环单链表的内存结构图很好理解它们的区别。\n\n如果想要了解关于单链表的更多信息，请参考\"单向链表\"部分。\n\n类似的，双链表和循环双链表的关系也类似，在判断链表是否遍历完成的条件有所不同。\n\n如果想要了解关于双链表的更多信息，请参考\"双向链表\"部分。\n\n\t\t"},"contentType":0},{"basicData":{"code":"\n\n/**\n * 循环单链表的相关操作。\n \n * 包括：链表的创建、输出链表内容、删除节点、插入节点\n * 这里队列元素储存的数据类型为 int 类型，没有使用 typedef 关键字，如有需要请自行更改\n * Author：指点 \n */\n#include <stdio.h>\n#include <stdlib.h>\n\n// 链表节点的结构体，包含数据部分和指针部分(指向下一个节点的地址) \ntypedef struct Node {\n\tint data;\n\tstruct Node *next;\n}Node;\n\n// 定义链表的头结点 \nNode *headNode = NULL;  \n\n// 创建链表 \nvoid createLinkList() {\n\tint data;\n\t// 为链表的头结点申请内存空间 \n\theadNode = (Node *) malloc(sizeof(Node));\n\t// 头结点的 data 用于储存链表的节点总数(包括头结点)\n\theadNode->data = 1; \n\theadNode->next = NULL;\n\t// 当前要创建的节点的指针 \n\tNode *node = NULL;\n\t/* 这个指针一直指向当前要创建的节点的前一个节点，\n\t * 随着节点的创建它会慢慢向后移，用于连接当前要创建的节点\n\t */ \n\tNode *prior = headNode; \n\tprintf(\"请输入要创建的节点数据，输入 -1 代表结束创建节点:\\n\"); \n\tdo {\n\t\tscanf(\"%d\", &data);\n\t\t// 如果输入的是 -1 则跳出循环 \n\t\tif(data == -1) {\n\t\t\tbreak;\n\t\t}\n\t\t// 为当前要创建的节点申请内存空间并且进行数据赋值 \n\t\tnode = (Node *) malloc(sizeof(Node));\n\t\tnode->data = data; \n\t\tnode->next = NULL;\n\t\tprior->next = node;\n\t\t// 链表总的节点数加一 \n\t\theadNode->data++;  \n\t\t/* 将前节点指针后移，保证每次创建新的节点的时候它都在新的节点的前一个节点位置，\n\t\t用于连接这个新的节点到链表的尾部 */ \n\t\tprior = node;\n\t} while(1); \n\t// 尾节点的 next 指针指向头结点构造循环单链表 \n\tprior->next = headNode; \n}\n\n// 输出链表的所有节点数据 \nvoid printLinkList() {\n\tprintf(\"\\n当前链表的节点总数(包括头结点)：%d\\n\", headNode->data);\n\tNode *startNode = headNode->next;\n\tprintf(\"当前链表内容：headNode --> \");\n\t// 当节点不等于头结点的时候输出节点内容 \n\twhile(startNode != headNode) {\n\t\tprintf(\"%d --> \", startNode->data);\n\t\tstartNode = startNode->next; \n\t} \n\tprintf(\"headNode\\n\");\n}\n\n// 删除链表指定位置的节点 \nvoid deleteNode() {\n\tint i;\n\tint position;\n\t// 定义要删除的节点 \n\tNode *deleteNode = headNode->next;\n\t// 定义要删除的节点的前一个位置的节点，用于连接要删除的节点的之后的节点 \n\tNode *priorNode = headNode; \n\t// 如果链表里面只有一个头结点，那么直接返回(头结点不可删除) \n\tif(headNode->data == 1) {\n\t\treturn ;\n\t} \n\tprintf(\"输入要删除的节点位置(1~%d):\", headNode->data-1); \n\tscanf(\"%d\", &position);\n\tif(position < 1 || position > headNode->data-1) {\n\t\tprintf(\"位置输入错误！\");\n\t\treturn ;\n\t}\n\t/* 找到要删除的节点，循环单链表里面不存在空节点，所以无需判断要删除的节点 */ \n\tfor(i = 1; i < position; i++) {\n\t\tdeleteNode = deleteNode->next;\n\t\tpriorNode = priorNode->next;\n\t}\n\tpriorNode->next = deleteNode->next;\n\t// 将指针指向空并且回收这个节点的内存空间 \t\t\n\tdeleteNode->next = NULL; \n\tfree(deleteNode);\n\t// 链表的节点总数减一 \n\theadNode->data--;\n} \n\n// 向链表的指定位置插入节点 \nvoid insertNode() {\n\t// 定义要插入的节点、插入位置和数据值 \n\tNode *insertNode = NULL;\n\tint position, data;\n\tint i; \n\t// 定义要插入的节点的前一个位置的节点，用于连接要插入的节点的之后的节点 \n\tNode *priorNode = headNode;\n\t\n\tprintf(\"输入节点的插入位置(1~%d)和数据值：\", headNode->data);\n\tscanf(\"%d %d\", &position, &data);\n\tif(position < 1 || position > headNode->data) {\n\t\tprintf(\"位置输入错误！\");\n\t\treturn ;\n\t}\n\t// 为要插入的节点申请内存空间 \n\tinsertNode = (Node *) malloc(sizeof(Node));\n\tinsertNode->data = data;\n\t// 找到节点的插入位置 \n\tfor(i = 1; i < position; i++) {\n\t\tpriorNode = priorNode->next; \n\t}\n\t// 进行节点插入 \n\tinsertNode->next = priorNode->next;\n\tpriorNode->next = insertNode;\n\t// 链表节点总数加一 \n\theadNode->data++;\n} \n\nint main() {\n\t// 创建链表 \n\tcreateLinkList(); \n\t// 输出链表所有的节点数据 \n\tprintLinkList(); \n\t// 删除链表节点 \n\tdeleteNode();\n\t// 输出链表所有的节点数据 \n\tprintLinkList(); \n\t// 向链表中插入新节点\n\tinsertNode();\n\t// 输出链表所有的节点数据 \n\tprintLinkList(); \n\t\n\treturn 0;\n}\n\t\t","code_language":-1},"contentType":2},{"basicData":{"text":"\n循环单链表的操作和单链表的操作基本一致，不同在于循环单链表中没有空节点，\n也就是说每个在循环单链表中的节点都是非空的指针。\n\n基于这个，我们在操作的时候不需要担心内存泄漏的问题，但是在构造循环单链表的过程中，\n在处理尾节点的时候必须要把其 next 指针指向头结点，这样就把链表\"串\"起来了，\n结合循环单链表的内存结构图，很容易理解这些过程。\n\n类似的，循环双链表的操作思想也差不多，代码不在这里给出，\n而是作为\"习题巩固\"部分的内容。\n最后是程序运行的结果：\n\t\t"},"contentType":0},{"basicData":{"image_url":"xianxingjiegou_17.png"},"contentType":1}]}