<?xml version="1.0" encoding="UTF-8"?>
<contents>
	<text>
顺序表是在计算机内存中以一组地址连续的储存单元来储存数据元素的一种线性结构。"换行"
其特点是：在逻辑上相邻的元素，在计算机中的内存地址也是相邻的。"换行"
基于这个特性，通过数组来实现顺序表是一个常用的选择(数组的相邻元素的地址相邻)，
如果有一个线性表为：(a1, a2, a3, ..., an)，如果通过顺序表储存，
其在计算机内存中的储存结构如图：
	</text>
	<img filepath="xianxingjiegou_2.png">
	</img>
	<text>
因为相邻储存单元的内存地址也相邻，所以我们在访问里面的元素的时候的时间复杂度就是O(1)，
这一点在数组上的体现就是就是直接通过数组下标来进行数组元素访问。"换行"
也正是因为这点，我们往顺序表中插入元素的时候，先要为顺序表新增一个元素的储存空间，
然后需要把在插入位置之后的所有元素都向后移动一个位置，之后再插入这个元素到指定位置。"换行"
时间复杂度就变成了O(n)，关于插入，可以参考"动画演示"和"代码实现"部分。"换行"
对于从顺序表中删除元素，我们需要把处于要删除元素的位置位置之后所有的元素都向前移动一个位置，
通过这个操作来用之后的元素将要删除的元素"覆盖"，进而进行删除。"换行"
同样的，这部分操作的时间复杂度也是O(n)，
关于删除，可以参考"动画演示"和"代码实现"部分。"换行"
那么对于两个顺序表的合并呢？假设一个顺序表的长度 n, 另一个为 m,
合并这两个顺序表的时候需要遍历两个顺序表，每次选出元素值较小(较大)的那个元素进行合并，
整个过程的时间复杂度为 O(m+n)。"换行"关于合并操作，可以参考"动画演示"和"代码实现"部分
	</text>
	<code>
/**
 * 使用数组来实现顺序表，C语言程序，没有实现封装：
 * 请注意: 为了方便理解, 并没有采用自定义结构体来实现顺序表
 * 而是采用了数组来实现
 * 这里顺序表储存的数据的数据类型为 int 类型 
 * 如有需要请自行切换数据类型 
 */ 
#include &lt;stdio.h&gt;
// N 代表数组元素个数
const int N = 10;

int main() {
	int i;
	int a[N];
	// 输出这 10 个数组元素的地址，a 为数组首地址
	for(i = 0; i &lt; N; i++) {
		printf("%.d ", a + i);
	}
	
	return 0;
}
	</code>
	<img filepath="xianxingjiegou_3.png" />
	<text>
我们通过结果可以看到：10 个数组元素中相邻的数组元素的地址也相邻，
因此，对于顺序表，我们可以采用数组来将其轻松实现。"换行"
相对于链表来说，因为数组元素个数程序开始前定义好了，也就是说，
顺序表的内存空间在程序运行之前已经确定了，
这样会导致部分内存空间浪费的现象，而链表不会由内存空间浪费的现象，
但是链表的实现比顺序表复杂，关于这个，请参考"单向链表"部分
	</text>
	<code>
/**
 * 顺序表的插入元素操作，C语言程序，没有实现封装： 
 * 请注意: 为了方便理解, 并没有采用自定义结构体来实现顺序表
 * 而是采用了数组来实现
 * 这里队列元素储存的数据类型为 int 类型，没有使用 typedef 关键字，如有需要请自行更改
 * 如有需要请自行切换数据类型 
 */
#include &lt;stdio.h&gt;
// N 代表数组元素个数 
const int N = 10; 

int main() {
	int i, j;
	// 要插入的元素值和要插入的位置 
	int insert, insertPos;
	/* 本身有 N 个元素，还要插入一个元素，因此定义含有 N+1 个元素的数组 */ 
	int a[N+1];
	// 循环对数组元素进行赋值 
	for(i = 0; i &lt; N; i++) {
		a[i] = i+1;
	}
	printf("插入元素之前的顺序表：\n");
	for(i = 0; i &lt; N; i++) {
		printf("%d ", a[i]);
	} 
	printf("\n输入要插入的元素值和插入位置下标(0~10): ");
	scanf("%d %d", &amp;insert, &amp;insertPos); 
	// 对输入的元素插入位置进行检查 
	if(insertPos &lt; 0 || insertPos &gt; 10) {
		printf("元素插入位置输入错误！\n");
		return 0;
	}
	/* 进行元素的移动：要插入的位置之后的数组元素全部向后移动一个位置 */ 
	for(i = N; i &gt; insertPos; i--) {
		a[i] = a[i-1]; 
	} 
	// 进行元素插入 
	a[insertPos] = insert;
	
	printf("插入元素之后的顺序表：\n");
	for(i = 0; i &lt; N+1; i++) {
		printf("%d ", a[i]);
	} 
	
	return 0;
}
	</code>
	<text>
来看看测试数据和结果：
	</text>
	<img filepath="xianxingjiegou_4.png" />
	<text>
上图中的数据将值为 0 的一个元素插入到顺序表的开头元素(下标为 0 的位置)，那么就要把原来顺序表中所有的元素都向后移动一个位置,时间复杂度即为 O(n)。"换行"
	</text>
	<code>
/**
 * 顺序表的删除元素操作，C语言程序，没有实现封装：
 * 请注意: 为了方便理解, 并没有采用自定义结构体来实现顺序表
 * 而是采用了数组来实现
 * 这里队列元素储存的数据类型为 int 类型，没有使用 typedef 关键字，如有需要请自行更改
 * 如有需要请自行切换数据类型 
 */
#include &lt;stdio.h&gt;
// N 代表数组元素个数 
const int N = 10; 

int main() {
	int i, j;
	// 要删除的元素位置 
	int deletePos;
	int a[N];
	// 循环对数组元素进行赋值 
	for(i = 0; i &lt; N; i++) {
		a[i] = i+1;
	}
	printf("删除元素之前的顺序表：\n");
	for(i = 0; i &lt; N; i++) {
		printf("%d ", a[i]);
	} 
	printf("\n输入要删除的元素所处位置下标(0~10): ");
	scanf("%d", &amp;deletePos); 
	// 对输入的元素插入位置进行检查 
	if(deletePos &lt; 0 || deletePos &gt; 10) {
		printf("元素位置输入错误！\n");
		return 0;
	}
	/* 进行元素的移动：要删除的位置之后的数组元素全部向前移动一个位置 */ 
	for(i = deletePos; i &lt; N-1; i++) {
		a[i] = a[i+1]; 
	} 
	
	// 输出删除元素之后的顺序表，因为删除了一个元素，所以顺序表长度减一
	printf("删除元素之后的顺序表：\n");
	for(i = 0; i &lt; N-1; i++) {
		printf("%d ", a[i]);
	} 
	
	return 0;
}
	</code>
	<text>
测试数据和结果如图：
	</text>
	<img filepath="xianxingjiegou_5.png" />
	<text>
同插入操作一样，上图将顺序表的开头元素(下标为 0 的位置)删除并且将之后的所有顺序表元素都向前移动一个位置。"换行"
此操作的复杂度为 O(n)
	</text>
	<code>
/**
 * 按顺序原有顺序合并两个有序的顺序元素操作： 
 * 请注意: 为了方便理解, 并没有采用自定义结构体来实现顺序表
 * 而是采用了数组来实现
 * 这里队列元素储存的数据类型为 int 类型，没有使用 typedef 关键字，如有需要请自行更改
 * 如有需要请自行切换数据类型 
 */
#include &lt;stdio.h&gt;
// 定义两个要合并的顺序表的大小 
const int N = 10;
const int M = 5;

int main() {
	int i, j, k;
	// 定义两个要合并的顺序表和储存合并结果的顺序表： 
	int a[N], b[M], result[M];
	// 为两个顺序表赋值 
	for(i = 0; i &lt; N; i++) {
		a[i] = i+1;
	}
	for(i = 0; i &lt; M; i++) {
		b[i] = i;
	}
	printf("合并之前的 a 顺序表：\n");
	for(i = 0; i &lt; N; i++) {
		printf("%d ", a[i]);
	}
	printf("\n合并之前的 b 顺序表：\n");
	for(i = 0; i &lt; M; i++) {
		printf("%d ", b[i]);
	}
	// 进行顺序表元素的合并 
	for(i = j = 0; i &lt; N &amp;&amp; j &lt; M; ) {
		// 依次"摘取"两表中较小的元素插入 result 表的最后 
		if(a[i] &lt; b[j]) {
			result[k++] = a[i++];
		} else {
			result[k++] = b[j++];
		}
	}
	/* b 顺序表已经到达表尾, 直接将 a 顺序表中剩下的元素插入到 result 表的最后 */ 
	while(i &lt; N) {
		result[k++] = a[i++];
	} 
	/* a 顺序表已经到达表尾, 直接将 b 顺序表中剩下的元素插入到 result 表的最后 */
	while(j &lt; M) {
		result[k++] = b[j++];
	}
	printf("\n合并之后的顺序表：\n");
	for(i = 0; i &lt; k; i++) {
		printf("%d ", result[i]);
	} 
	
	return 0;
} 
	</code>
	<text>
程序的运行结果：
	</text>
	<img filepath="xianxingjiegou_6.png" />
	<text>
我们可以看到，图中的两个表的元素按照从小到大合并，并且两个表都会遍历一次，
所以此操作的时间复杂度为O(m+n)。"换行"
	</text>
	<animation html_path="" animation_name="线性结构:顺序表">

	</animation>
</contents>