[
  {
    "basicData": {
      "text": "\n栈(stack)又名堆栈，它是一种运算受限的线性表。\n\n其限制是仅允许在表的一端进行插入和删除运算。\n这一端被称为\"栈顶\"，\n相对地，把另一端称为\"栈底\"。\n向一个栈插入新元素称作进栈(入栈、压栈)，\n它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；\n从一个栈删除栈顶元素称为出栈，它是把栈顶元素删除掉，\n原栈顶的下一个元素作为新的栈顶。\n由于栈结构的这种运算特性，\n其里面元素的出栈顺序为\"后进先出\"，也可以将其称为后进先出的线性表。\n\n下面是栈结构的内存结构图：\n\t",
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "xianxingjiegou_18.png",
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n上图基本上已经包含了栈结构的一些操作：元素进栈、出栈、访问栈顶元素，\n这种操作类似于洗盘子：洗干净的盘子总是向上叠，而用的时候却是从上向下取。\n\n当然我们可以外加一些对栈结构的其他操作使得栈更易于被使用，\n但是我们外加的操作不能违背栈的本身特性，不然就不叫栈了。\n\n比如说我们不能给其加上访问中间元素的操作，否则就成普通的线性表了。\n\n因为栈对元素的物理内存地址是否相邻没有要求，\n所以我们在实现栈的时候有两种选择：顺序栈和链栈，\n顺序栈和顺序表类似，通过数组来储存元素，元素物理内存地址连续，\n遍历栈的时候从栈顶开始，不断读取和弹出栈顶元素，直到栈为空，完成遍历。\n\n链栈和单链表类似，以\"节点指针\"的形式储存元素，每一个节点有一个 next 指针，\n指向下一个节点的物理内存地址，遍历的时候读取栈顶元素指针，\n之后将栈顶元素指针向下移动，重复这个过程，直到到达栈底指针，\n其实和遍历单链表的思想是一样的。\n因为顺序栈实现起来比链栈简单，\n所以除非有特殊要求，否则我们一般都是使用顺序栈。\n\n对于栈的相关操作，请参考\"动画演示\"和\"代码实现\"部分。\n\n\t",
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "animation_name": "线性结构:栈",
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 4
  },
  {
    "basicData": {
      "code": "\n\n/**\n* 创建顺序栈并且实现其相关操作：\n* 进栈、出栈、访问栈顶元素、判断栈是否为空...\n* 这里队列元素储存的数据类型为 int 类型，没有使用 typedef 关键字，如有需要请自行更改\n* Author：指点 \n*/ \n#include <stdio.h>\n#include <stdlib.h>\n\n// 栈能储存的元素的最大个数 \nconst int MAX_SIZE = 1000; \n// 创建表示栈的结构体：栈顶指针，栈底指针，栈的最大容量 \ntypedef struct Stack {\nint *top;\nint *base; \nint stackSize;\n}Stack;\n\n// 创建全局变量表示一个栈 \nStack stack;\n\n// 创建顺序栈 \nvoid createStack() {\n// 为栈动态申请数组内存空间 \nstack.base = (int *) malloc(MAX_SIZE*sizeof(int)); \nstack.top = stack.base; \nstack.stackSize = MAX_SIZE; \n}\n\n// 元素入栈 \nvoid push(int n) {\n// 如果栈已满，那么直接返回 \nif(stack.top - stack.base >= stack.stackSize) {\n\tprintf(\"栈已满，元素入栈失败！\\n\"); \n\treturn ;\n}\n// 插入元素作为栈顶元素 \n*stack.top = n; \nprintf(\"元素 %d 入栈成功\\n\", n);\n// 栈顶指针+1 \nstack.top++; \n}\n\n// 判断栈是否为空，空：返回 1，非空：返回 0 \nint isEmpty() { \nreturn stack.top == stack.base; \n}\n\n// 弹出栈顶元素，但不返回栈顶元素的值 \nvoid pop() {\n// 如果栈为空，直接返回 \nif(isEmpty()) {\n\tprintf(\"栈已空！\\n\");\n\treturn ; \n} \nstack.top--;\n} \n\n// 获取当前栈顶元素的值，不改变栈顶指针 \nint getTop() {\nif(stack.top != stack.base) {\n\treturn *(stack.top-1);\n} else {\n\tprintf(\"栈已空！\\n\"); \n} \n}\n\n\nint main() {\n\n// 创建栈 \ncreateStack();\n// 元素进栈\npush(1); \npush(2);\npush(3);\npush(4);\npush(5);\n// 当栈不为空的时候取出栈顶元素并且栈顶元素出栈 \nwhile(!isEmpty()) {\n\tprintf(\"当前栈顶元素值：%d\\n\", getTop());\n\tpop();\n}\n// 程序结束的时候释放栈的内存空间 \nfree(stack.base);\n\nreturn 0;\n}\n\t",
      "code_language": -1,
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 2
  },
  {
    "basicData": {
      "text": "\n上面代码展示了顺序栈的一些基本操作，其实就是对栈顶指针进行对应操作，\n来看看程序结果：\n\t",
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "xianxingjiegou_19.png",
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n1、请尝试实现链栈的基本操作\n\t",
      "parent_dir_path": "datastruct/线性结构"
    },
    "contentType": 0
  }
]