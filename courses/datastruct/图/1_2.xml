<?xml version="1.0" encoding="UTF-8"?>
<contents>
	<text>
图的遍历是指按照某种算法来对整个图的顶点进行访问，当图中所有的顶点都被访问完了之后图的遍历就结束。"换行"
但是要注意的一点是图的遍历是通过边来进行的，所以要求要遍历的图是一个连通图，否则就不能访问到所有顶点。"换行"
关于连通图的概念请参考"图的简介"部分内容。"换行"这里要介绍的是图的深度优先遍历：
深度优先遍历也叫深度优先搜索(Depth First Search)，是遍历连通图的一种算法思想。"换行"其基本步骤如下：
设 n 是当前被访问顶点，在对 n 做过访问标记后，通过边(n, i) 选择一个与顶点 n 相连的并且未被访问过的顶点 i 。"换行"
若发现顶点 i 已访问过，则重新通过边(n, k) 选择一个与顶点 n 相连的并且未被访问过的顶点 k，
否则沿边(n, i)到达未曾访问过的 i顶点，对 i 访问并将其标记为已访问过；换行"
然后从 i 开始重复这个搜索过程，直到搜索完从 i 出发的所有路径，即访问完所有从 i 顶点出发可达的顶点之后，
再回溯到顶点 n ，并且再选择一条从 n 顶点出发的未检测过的边。"换行"上述过程直至从 n 出发的所有边都已检测过为止。"换行"
基于深度优先遍历的思想，采用递归的形式实现其算法会比较简单。"换行"
	</text>
	<img>
tu_5.png
	</img>
	<text>
以上图给出的无向图为例，假设从 1 号顶点开始对图进行深度优先遍历，首先打印出顶点1 的信息，并且标记 1 号顶点已经被访问，接下来寻找和顶点1 相连的编号最小的顶点，很明显是顶点2 ，检查顶点2 是否被访问，在这里顶点2 还没有被访问，那么打印出顶点2 的信息，并且标记顶点2 已经被访问；"换行"接下来从顶点2 开始，寻找和顶点2 相连的编号最小的顶点，这里我们就找到了顶点1 ，但是因为顶点1 刚刚已经被标记为已访问，所以不能访问顶点1，
那么继续寻找和顶点2 相连的编号最小的顶点，这时我们找到了顶点4 ，并且顶点4 还没有被访问，所以打印出顶点 4 的信息；"换行"
并且从顶点 4开始继续寻找和顶点4 相连的编号最小的顶点，这时找到了顶点1 ，但是顶点1 已经被标记为已经被访问过了；"换行"
所以我们寻找下一个和顶点4 相连的编号最小的顶点，这一次我们找打了顶点 2，
但是同样的顶点2 也是刚刚被标记为已经被访问过了；"换行"所以我们还需要继续寻找，接下来我们找到了顶点3，
并且顶点3 未被访问过，所以我们打印出顶点3 的信息并且从顶点3 开始继续以上过程；"换行"
因为到现在所有顶点都已经被访问过了，所以顶点3 的搜索结束了，那么回溯到上一个顶点：顶点 4；"换行"因为顶点4 的所有边都被访问过了，所以继续回溯到顶点2；"换行"
同样的，此时顶点2 的所有边也访问过了，那么回溯到顶点1 ，因为所有顶点都已经被访问过了，所以对顶点1 的搜索也结束了。"换行"
那么整个深度优先遍历结束，顶点访问的顺序为：1 --&gt; 2 --&gt; 4 --&gt; 3 。"换行"
如果读者不太理解这个过程可以在草稿纸模拟一遍。"换行"到这里我想读者应该能理解为什么深度优先遍历适用于连通图，
因为整个算法都是通过图的边来进行对顶点的访问，如果图不连通，那么有某些顶点不能被访问到。"换行"
关于图的深度优先遍历的实现，请参考"动画"和"代码"部分。"换行"
	</text>
	<link>
参考博客：http://blog.csdn.net/hacker_zhidian/article/details/61260543
	</link>
	<animation html_path=""></animation>
	<code>

/**
* 实现无权无向连通图的深度优先遍历：通过邻接矩阵和邻接表两种方式
* Author：指点 
*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
// 表示图的顶点最大数
#define MAX_NODE_SUM 1000
// 储存图信息的临接矩阵
int graph[MAX_NODE_SUM][MAX_NODE_SUM];

// 储存图顶点信息的结构体：顶点编号(number)、指向和链表头结点代表的顶点相连的下一个顶点的指针(next)
typedef struct Node {
int number;
struct Node *next;
}Node; 
// 储存图的邻接表中单链表头结点的指针数组 
Node *node[MAX_NODE_SUM] = {NULL};
// 标志顶点是否被访问过的数组：0(未被访问)，1(已经被访问) 
int visit[MAX_NODE_SUM];

// 通过邻接矩阵从编号为 n 的顶点开始对图进行深度优先遍历，nodeSum 为图的顶点总数 
void dfsMatrix(int n, int nodeSum) {
int i;
// 选择一个与顶点 n 相连的并且未被访问过的顶点 i 。"换行"
for(i = 1; i &lt;= nodeSum; i++) {
	/* 如果顶点 n 和顶点 i 之间有边相连并且顶点 i 还未被访问，
	 * 那么打印顶点编号并且标记顶点 i 已经被访问  
	 */
	if(graph[n][i] == 1 &amp;&amp; visit[i] == 0) {
		printf(" --&gt; %d", i);
		// 标记编号为 i 的顶点为已经被访问状态 
		visit[i] = 1;
		// 继续从顶点 i 开始遍历图 
		dfsMatrix(i, nodeSum);
		breai; 
	}
}
} 

// 通过邻接表从编号为 n 的顶点开始对图进行深度优先遍历，nodeSum 为图的顶点总数 
void dfsList(int n, int nodeSum) {
Node *point = node[n]-&gt;next;
while(point != NULL) {
	/* 如果和顶点 n 相连的当前顶点还未被访问，
	 * 那么打印顶点编号并且标记当前顶点已经被访问
	 * 因为邻接表中在同一条单链表里面储存的都是和头结点有边相连的顶点(和顶点 n 相连)，
	 * 所以无需判断其中的顶点和是否和编号为 n 的顶点是否相连
	 */
	if(visit[point-&gt;number] == 0) {
		printf(" --&gt; %d", point-&gt;number);
		// 标记当前顶点为已经被访问状态 
		visit[point-&gt;number] = 1;
		// 继续从当前顶点开始遍历图 
		dfsList(point-&gt;number, nodeSum); 
	}
	point = point-&gt;next; 
}
}

int main() {
// 图的顶点数和边数
int nodeSum, edgeSum;
// 边的开始顶点编号和结束顶点编号
int start, end;
// 为顶点申请内存空间的中间指针变量 
Node *point = NULL; 
int i, j;
printf("输入图的顶点数和边数：");
scanf("%d %d", &amp;nodeSum, &amp;edgeSum);
if(nodeSum &lt;= 0) {
	return 0;
}
// 为邻接表中每一个顶点所在单链表的头结点申请空间 
for(i = 1; i &lt;= nodeSum; i++) {
	node[i] = (Node *) malloc(sizeof(Node));
	node[i]-&gt;number = 0;
	node[i]-&gt;next = NULL;
} 
for(i = 1; i &lt;= edgeSum; i++) {
	printf("输入第 %d 条边的开始顶点编号和结束顶点编号：", i);
	scanf("%d %d", &amp;start, &amp;end);
	// 因为是无向图，所以每一条无向边可以看成双向的有向边 
	graph[start][end] = graph[end][start] = 1;

	/* 对邻接表进行操作：
	 *为保存顶点信息的结构体指针申请空间
	 */ 
	point = (Node *) malloc(sizeof(Node));
	point-&gt;number = end;
	// 将编号为 end 的顶点插入到邻对应单链表的头结点后面 
	point-&gt;next = node[start]-&gt;next;
	node[start]-&gt;next = point;
	// 和编号为 start 的顶点相连的顶点个数 +1  
	node[start]-&gt;number++; 
	
	// 为保存顶点信息的结构体指针申请空间 
	point = (Node *) malloc(sizeof(Node));
	point-&gt;number = start;
	// 将编号为 start 的顶点插入到邻对应单链表的头结点后面 
	point-&gt;next = node[end]-&gt;next;
	node[end]-&gt;next = point;
	// 和编号为 end 的顶点相连的顶点个数 +1  
	node[end]-&gt;number++; 
}

printf("图的邻接矩阵：\n"); 
for(i = 1; i &lt;= nodeSum; i++) {
	for(j = 1; j &lt;= nodeSum; j++) {
		printf("%d ", graph[i][j]);
	}
	printf("\n");
}
printf("图的邻接表：\n"); 
for(i = 1; i &lt;= nodeSum; i++) {
	point = node[i];
	printf("和顶点 %d 连接的顶点数：%d，其单链表为：%d", i, point-&gt;number, i);
	point = point-&gt;next;
	while(point != NULL) {
		printf(" --&gt; %d", point-&gt;number);
		point = point-&gt;next;
	}
	printf("\n");
} 

printf("\n通过邻接矩阵深度优先遍历图: \n"); 
// 从顶点 1 开始遍历图： 
printf("1");
visit[1] = 1;
dfsMatrix(1, nodeSum);
// 将顶点的访问标记初始化用于进行邻接表的深度优先遍历 
memset(visit, 0, sizeof(visit)); 
printf("\n通过邻接表深度优先遍历图: \n"); 
// 从顶点 1 开始遍历图： 
printf("1");
visit[1] = 1;
dfsList(1, nodeSum);

return 0;
}
	</code>
	<text>
以上方给出的图中的无权无向图的数据为数据源，运行程序，结果如下：
	</text>
	<img>
tu_6.png
	</img>
</contents>