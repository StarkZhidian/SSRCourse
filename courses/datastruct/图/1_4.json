[
  {
    "basicData": {
      "text": "\nKruskal算法的思想，简单来说，就是如果一个图有 n 个顶点，选出总权值最小并且不会构成回路的 n-1 条边使得图中的任意两个顶点都能通过这 n-1 条边中的若干条边连通。\n\n这里可能有些小伙伴要问了，为什么选择 n-1 条边就能使得图的任意两个顶点连通？\n因为在图中的两个顶点之间如果没有回路的话最多相隔 n-1 条边，\n不信的话你可以画几个图看看（注意这里说的是没有回路的图）。\n\n基于以上思想，在实现 Kruskal算法的时候，我们先得给图的边按权值从小到大排序，\n还有一个关键点是怎么判断一条边加入生成树中会不会使得生成树产生回路。\n\n我们可以将已经选择了的边的顶点看做一个集合（它们有共同的祖先），对于没有加入生成树的顶点将它们每个顶点单独看成一个集合。\n那么我们选择边的时候只需要判断边的两个顶点是不是在同一个集合中，如果不在同一个集合中，那么这条边和已经加入生成树的边就不会产生回路，就可以选择这条边，否则的话就不能加入生成树中。\n重复这个过程，直到选择了 n-1 条边。\n \n依然一下面的有权图为例，通过 Kruskal算法来求出其的最小生成树：\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_8.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n最小生成树的构造过程如下：\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_11.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n关于 Kruskal算法的实现请参考\"动画\"和\"代码\"部分。\n\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "animation_name": "图:克鲁斯卡尔算法",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 4
  },
  {
    "basicData": {
      "code": "\n\n/**\n * 实现图的最小生成树算法：Kruskal算法\n * 使用邻接矩阵来储存图的信息 \n * Author：指点 \n */\n#include <stdio.h>\n// 表示图的顶点最大数\n#define MAX_NODE_SUM 1000\n// 指定图中边权值的极限值(代表∞) \n#define INF 999999999 \n// 表示图的边的信息的结构体：开始顶点、结束顶点和边的权值： \ntypedef struct Edge {\n\tint start;\n\tint end;\n\tint weight;\n}Edge;\n// 储存图的边的信息的结构体数组\nEdge edge[MAX_NODE_SUM*MAX_NODE_SUM]; \n// 储存图顶点所在集合的祖先数组，用于判断生成树的顶点是否会构成环 \nint nodeSet[MAX_NODE_SUM];\n// 最小生成树的权值，初始为 0 \nint sumWeight = 0;\n\n// 利用快速排序来对图的边按权值从小到大排序 \nvoid quickSort(Edge edge[], int start, int end) {\n\tEdge t;\n\tint i = start, j = end, temp = edge[start].weight;\n\tif(start >= end) {\n\t\treturn ;\n\t}\n\twhile(i < j) {\n\t\twhile(i < j && edge[j].weight >= temp) {\n\t\t\tj--;\n\t\t}\n\t\t// 找到并交换右边第一个比基数小的元素 \n\t\tt = edge[i];\n\t\tedge[i] = edge[j];\n\t\tedge[j] = t;\n\t\t\n\t\twhile(i < j && edge[i].weight <= temp) {\n\t\t\ti++;\n\t\t}\n\t\t// 找到并交换左边第一个比基数大的元素\n\t\tt = edge[i];\n\t\tedge[i] = edge[j];\n\t\tedge[j] = t;\n\t}\n\t// 分治递归 \n\tquickSort(edge, start, i-1);\n\tquickSort(edge, i+1, end);\n} \n\n// 寻找顶点n 所在集合的祖先顶点编号 \nint findParent(int n) {\n\t// 如果顶点 n的祖先就是它本身，那么直接返回顶点编号 \n\tif(nodeSet[n] == n) {\n\t\treturn n;\n\t} \n\t// 递归寻找祖先顶点，并把途中找到的顶点都设置为同一个祖先顶点 \n\treturn nodeSet[n] = findParent(nodeSet[n]);\n}\n\n// 合并两个顶点所在的集合 \nvoid merge(int n, int m) {\n\tint p1, p2;\n\tp1 = findParent(n);\n\tp2 = findParent(m);\n\t/* 如果两个顶点所在集合祖先不同，那么合并这两个顶点所在集合，\n\t * 即把顶点n 的祖先变为顶点m 的祖先 \n\t */\n\tif(p1 != p2) {\n\t\tnodeSet[p1] = p2;\n\t}\n} \n\n// Kruskal 算法求出图的最小生成树，nodeSum 为图的顶点总数，edgeSum 为图的边总数 \nint kruskal(Edge edge[], int nodeSum, int edgeSum) {\n\t// 生成树中已经加入的边的数 \n\tint count = 0;\n\tint i;\n\t// 顶点集合初始化，每个顶点所在集合的祖先就是这个顶点本身 \n\tfor(i = 1; i <= nodeSum; i++) {\n\t\tnodeSet[i] = i;\n\t}\n\t// 对边进行按权值排序 \n\tquickSort(edge, 1, edgeSum); \n\t// 不断向生成树中加边，直到加到 edgeSum-1 条边为止 \n\tfor(i = 1; i <= edgeSum && count < edgeSum; i++) {\n\t\t// 如果边的两个顶点不在一个集合中，证明将这条边加入生成树中不会构成回路 \n\t\tif(findParent(edge[i].start) != findParent(edge[i].end)) {\n\t\t\t// 将这条边加入生成树中 \n\t\t\tmerge(edge[i].start, edge[i].end); \n\t\t\tcount++;\n\t\t\t// 更新生成树总权值 \n\t\t\tsumWeight += edge[i].weight;\n\t\t}\n\t}\n\t\n\treturn sumWeight; \n}\n\nint main() {\n\t// 图的顶点数和边数\n\tint nodeSum, edgeSum;\n\t// 边的开始顶点编号、结束顶点编号和边的权值 \n\tint start, end, weight;\n\tint i, j;\n\tprintf(\"输入图的顶点数和边数：\");\n\tscanf(\"%d %d\", &nodeSum, &edgeSum); \n\tif(nodeSum == 0) {\n\t\treturn 0;\n\t}\n\t// 输入边的信息，更新顶点之间的距离 \n\tfor(i = 1; i <= edgeSum; i++) {\n\t\tprintf(\"输入第 %d 条边的开始顶点编号、结束顶点编号和边的权值：\", i);\n\t\tscanf(\"%d %d %d\", &start, &end, &weight);\n\t\tedge[i].start = start;\n\t\tedge[i].end = end;\n\t\tedge[i].weight = weight;\n\t} \n\t\n\tprintf(\"最小生成树的权值总和：%d \\n\", kruskal(edge, nodeSum, edgeSum));\n\t\n\treturn 0;\n}\n\t\t",
      "code_language": -1,
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 2
  },
  {
    "basicData": {
      "text": "\n上面的代码中使用了快速排序的思想，关于快速排序，可以看参考\"快速排序\"部分。\n\n如果你对 C++ 中 STL 模板熟悉，也可以直接使用其中的 sort 方法。\n\n关于 Kruskal算法的时间复杂度，算法主要把时间花费在对边的排序上，这里采用的是快速排序，所以时间复杂度为O(m*log(m))，m 为图的边总数。\n\n\n以上图中有权图作为数据源，运行程序：\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_12.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n这篇内容介绍一下图的最小生成树算法，关于图的生成树的概念请参考\"图的简介\"部分。\n\n那么为什么要求出图的最小生成树呢？\n假设你现在在为一个城市修路，\n你需要使得这个城市之间的任意两个小城镇之间有直接或者间接的道路相连，怎么样使得修路的费用最小呢？\n\n这其实就是一个图的最小生成树问题，城市中的城镇就是图的顶点，道路就是边，道路长度就是边的权值。\n\n我们是要在连通所有城镇的情况下找出所有道路权值之和最小的修路方案。\n\n求一个图的最小生成树一般有两种常用的算法：普里姆(Prim)算法和克鲁斯卡尔(Kruskal)算法。\n\nKruskal算法在下一部分会介绍，先看一下Prim算法的思想和步骤：\n\n1、初始化生成树，没有任何顶点，生成树到所有顶点的距离都为 INF。\n\n2、选择连通图中的任意一个顶点V0 作为生成树根节点加入生成树中，\n并通过顶点V0 的边缩短更新生成树到其他顶点的距离。\n\n3、选出距离当前生成树最近并且还未被加入生成树的顶点Vi 加入生成树中，通过顶点Vi 来缩短生成树到其他顶点的距离。\n\n4、重复步骤3 ，直到图的所有顶点都加入到生成树中，此时的生成树就是最小生成树。\n\n总的来说其实 Prim 就是不断的向生成树中加入当前距离生成树最近并且还未加入生成树的顶点。\n可称为\"加点法\"。\n\n下面以一个有权图为例，来看一下怎么通过 Prim 算法构造我们需要的最小生成树：\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_8.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n最小生成树的构造过程如下：\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_9.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n关于 Prim算法的实现请参考\"动画\"和\"代码\"部分。\n\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 4
  },
  {
    "basicData": {
      "code": "\n\n/**\n * 实现图的最小生成树：Prim 算法 \n * 使用邻接矩阵来储存图的信息 \n * Author：指点 \n */\n#include <stdio.h>\n// 表示图的顶点最大数\n#define MAX_NODE_SUM 1000\n// 指定图中边权值的极限值(代表邻接矩阵中的∞) \n#define INF 999999999 \n// 储存图信息的临接矩阵\nint graph[MAX_NODE_SUM][MAX_NODE_SUM];\n// 最小生成树的权值，初始为 0 \nint sumWeight = 0;\n// 代表最小生成树到图中每个顶点的距离，初始值为 INF \nint dis[MAX_NODE_SUM] = {INF};\n// 标志顶点是否已经被加入生成树中 \nint visit[MAX_NODE_SUM] = {0};\n// 已加入生成树中的顶点数 \nint count = 0; \n\n// 实现 Prim 算法，nodeSum 为图的顶点总数 \nint prim(int nodeSum) {\n\tint i;\n\tint minWeight, minNode;\n\t// 将顶点 1 作为最小生成树的根节点并标记 \n\tvisit[1] = 1;\n\tcount++;\n\t// 利用顶点1 来更新最小生成树到每个顶点的距离 \n\tfor(i = 1; i <= nodeSum; i++) {\n\t\tdis[i] = graph[1][i];\n\t}\n\t// 当加入最小生成树的顶点小于图的顶点总数的时候继续循环 \n\twhile(count < nodeSum) {\n\t\t// 循环选出还未加入到最小生成树中并且距离最小生成树最近的顶点 \n\t\tminWeight = INF;\n\t\tfor(i = 1; i <= nodeSum; i++) {\n\t\t\tif(visit[i] == 0 && minWeight > dis[i]) {\n\t\t\t\tminWeight = dis[i];\n\t\t\t\tminNode = i; \n\t\t\t}\n\t\t}\n\t\t// 将当前距离最小生成树最近的顶点加入最小生成树中, 并且更新最小生成树的权值。\n \n\t\tvisit[minNode] = 1;\n\t\tcount++; \n\t\tsumWeight += minWeight; \n\t\t// 利用这个顶点来更新最小生成树到其他还未加入最小生成树的顶点的距离 \n\t\tfor(i = 1; i <= nodeSum; i++) {\n\t\t\tif(visit[i] == 0 && dis[i] > graph[minNode][i]) {\n\t\t\t\tdis[i] = graph[minNode][i];\n\t\t\t}\n\t\t} \n\t} \n\treturn sumWeight;\n} \n\nint main() {\n\t// 图的顶点数和边数\n\tint nodeSum, edgeSum;\n\t// 边的开始顶点编号、结束顶点编号和边的权值 \n\tint start, end, weight;\n\tint i, j;\n\tprintf(\"输入图的顶点数和边数：\");\n\tscanf(\"%d %d\", &nodeSum, &edgeSum); \n\tif(nodeSum == 0) {\n\t\treturn 0;\n\t}\n\t// 对储存图的邻接矩阵初始化 \n\tfor(i = 1; i <= nodeSum; i++) {\n\t\tfor(j = 1; j <= nodeSum; j++) {\n\t\t\t/* 如果 i 和 j 相等，即为同一个顶点，那么权值为 0 ，\n\t\t\t * 否则先假设顶点 i 和顶点 j 之间的边的权值为 INF(即为没有边相连)\n\t\t\t */ \n\t\t\tif(i == j) {\n\t\t\t\tgraph[i][j] = 0;\n\t\t\t} else {\n\t\t\t\tgraph[i][j] = INF;\n\t\t\t}\n\t\t}\n\t}\n\t// 输入边的信息，更新顶点之间的距离 \n\tfor(i = 1; i <= edgeSum; i++) {\n\t\tprintf(\"输入第 %d 条边的开始顶点编号、结束顶点编号和边的权值：\", i);\n\t\tscanf(\"%d %d %d\", &start, &end, &weight);\n\t\tgraph[start][end] = graph[end][start] = weight; \n\t} \n\t\n\tprintf(\"图的邻接矩阵的信息: \\n\");\n\tfor(i = 1; i <= nodeSum; i++) {\n\t\tfor(j = 1; j <= nodeSum; j++) {\n\t\t\tprintf(\"%-10d \", graph[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t} \n\t\n\tprintf(\"\\n最小生成树的权值总和：%d \\n\", prim(nodeSum));\n\t\n\treturn 0;\n} \n\t\t",
      "code_language": -1,
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 2
  },
  {
    "basicData": {
      "text": "\n这里给出的Prim算法的时间复杂度为O(n*n)，n为图的顶点数，以上面给出的有权图作为数据源，运行程序，得出程序运行结果：\n\t\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_10.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  }
]