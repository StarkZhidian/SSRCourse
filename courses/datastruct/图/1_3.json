[
  {
    "basicData": {
      "text": "\n图的广度优先遍历（Breadth First Search) 是连通图的一种遍历策略。\n其基本思想如下：\n\n1、从图中的某个顶点 V0 开始，访问该顶点；并将其标记为已被访问；\n\n2、从 V0 出发，依次访问V0的各个未曾访问的邻接点 V1，V2，…,Vn，并将顶点 V1，V2，…,Vn 标记为已被访问；\n\n3、然后,依次从 V1, V2,…,Vn 出发访问各自未被访问的邻接点；并将其标记为已被访问；\n\n依此类推，直到图中所有顶点都被访问完为止。\n这里很明显我们需要借助队列来保存访问过的顶点。\n\n下面仍然以一张无向无向图举例：\n\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_5.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n假设从顶点 1开始进行图的广度优先搜索，先打印出顶点1 的信息，并且把顶点1 标记为已经被访问，然后把顶点1 入队尾，\n然后从队列中取出并删除队头元素(顶点1) ，并且依次访问其编号最小的邻接点，\n此时编号分别为 2 、3 、4 的顶点分别被找到，因为之前编号为2、3、4 顶点都没被访问过，因此这里分别打印出这三个顶点的信息，将它们入队尾并且把这三个顶点标记为已经被访问；\n\n此时队列元素为： 2|3|4。\n\n然后从队列中取出并删除队头元素(顶点2)，并且依次访问其编号最小的邻接点，\n此时编号分别为 1 、4 的顶点分别被找到，但因为1 号顶点和4 号顶点已经被访问过了，所以这里没有任何顶点信息被打印，也没有任何顶点入队尾；\n\n此时队列元素为： 3|4。\n\n接下来从队列中取出并删除队头元素(顶点3)，并且依次访问其编号最小的邻接点，\n此时编号分别为 1 、4 的顶点分别被找到，同样的，因为1 号顶点和4 号顶点已经被访问过了，因此这里同样没有任何顶点信息被打印，也没有任何顶点入队尾；\n\n此时队列元素为： 4。\n\n接下来从队列中取出并删除队头元素(顶点4)，并且依次访问其编号最小的邻接点，\n此时编号分别为 1 、2、3 的顶点分别被找到，因为1 、2、3 号顶点都已经被访问过了，因此这里同样没有任何顶点信息被打印，也没有任何顶点入队尾；\n\n此时队列为空，算法结束，这里广度优先遍历顶点的顺序为：1 --> 2 --> 3 --> 4 。\n\n关于图的广度优先遍历的实现，请参考\"动画\"部分和\"代码\"部分。\n\n\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "animation_name": "图:广度优先遍历",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 4
  },
  {
    "basicData": {
      "code": "\n\n/**\n* 实现无权无向连通图的广度优先搜索：通过邻接矩阵和邻接表两种方式\n* Author：指点 \n*/\n#include <stdio.h>\n#include <stdlib.h> \n#include <string.h>\n// 表示图的顶点最大数\n#define MAX_NODE_SUM 1000\n// 储存图信息的临接矩阵\nint graph[MAX_NODE_SUM][MAX_NODE_SUM];\n\n// 储存图顶点信息的结构体：顶点编号(number)、指向和链表头结点代表的顶点相连的下一个顶点的指针(next)\ntypedef struct Node {\nint number;\nstruct Node *next;\n}Node; \n// 储存图的邻接表中单链表头结点的指针数组 \nNode *node[MAX_NODE_SUM] = {NULL};\n// 标志顶点是否被访问过的数组：0(未被访问)，1(已经被访问) \nint visit[MAX_NODE_SUM];\n\n// 通过邻接矩阵实现图的广度优先搜索，从编号为 startNode 的顶点开始. nodeSum 为图的顶点总数 \nvoid bfsMatrix(int startNode, int nodeSum) {\nint i, nodeNumber;\n// 通过数组来模拟队列，队列数组和头尾指针所在下标 \nint queue[MAX_NODE_SUM];\nint front = 0, rear = 0;\n// 打印这个顶点的信息，标记这个顶点已经被访问并且将这个顶点入队 \nprintf(\"%d\", startNode);\nvisit[startNode] = 1;\n// 编号为 startNode 的顶点入队列 \nqueue[rear++] = startNode;\n// 当队列头指针不等于队列尾指针，即为队列不为空时继续 \nwhile(front != rear) {\n\t// 获取队列头元素并将头元素出队列 \n\tnodeNumber = queue[front++];\n\tfor(i = 1; i <= nodeSum; i++) {\n\t\t/* 如果顶点 i 还未被访问过并且是编号为 nodeNumber 顶点的邻接点，\n\t\t * 打印这个顶点的信息，标记这个顶点已经被访问并且将这个顶点入队 \n\t\t */\n\t\tif(visit[i] == 0 && graph[nodeNumber][i] == 1) {\n\t\t\tprintf(\" --> %d\", i);\n\t\t\tvisit[i] = 1;\n\t\t\tqueue[rear++] = i;\n\t\t} \n\t} \n}\n} \n\n// 通过邻接表实现图的广度优先搜索，从编号为 startNode 的顶点开始. nodeSum 为图的顶点总数 \nvoid bfsList(int startNode, int nodeSum) {\nint i;\nNode *point = NULL;\n// 通过数组来模拟队列，队列数组和头尾指针所在下标 \nNode *queue[MAX_NODE_SUM];\nint front = 0, rear = 0;\n// 打印这个顶点的信息，标记这个顶点已经被访问并且将这个顶点入队 \nprintf(\"%d\", startNode);\nvisit[startNode] = 1;\n// 编号为 startNode 的顶点入队列 \nqueue[rear++] = node[startNode];\n// 当队列头指针不等于队列尾指针，即为队列不为空时继续 \nwhile(front != rear) {\n\tpoint = queue[front++]->next;\n\t// 循环查找整个单链表 \n\twhile(point != NULL) {\n\t\t// 如果顶点还未被访问过，打印这个顶点的信息，标记这个顶点已经被访问并且将这个顶点入队 \n\t\tif(visit[point->number] == 0) {\n\t\t\t// 打印这个顶点的信息，标记这个顶点已经被访问并且将这个顶点入队 \n\t\t\tprintf(\" --> %d\", point->number);\n\t\t\tvisit[point->number] = 1;\n\t\t\tqueue[rear++] = point;\n\t\t}\n\t\tpoint = point->next;\n\t}\n}\n} \n\n\nint main() {\n// 图的顶点数和边数\nint nodeSum, edgeSum;\n// 边的开始顶点编号和结束顶点编号\nint start, end;\n// 为顶点申请内存空间的中间指针变量 \nNode *point = NULL; \nint i, j;\nprintf(\"输入图的顶点数和边数：\");\nscanf(\"%d %d\", &nodeSum, &edgeSum);\nif(nodeSum <= 0) {\n\treturn 0;\n}\n// 为邻接表中每一个顶点所在单链表的头结点申请空间 \nfor(i = 1; i <= nodeSum; i++) {\n\tnode[i] = (Node *) malloc(sizeof(Node));\n\tnode[i]->number = 0;\n\tnode[i]->next = NULL;\n} \nfor(i = 1; i <= edgeSum; i++) {\n\tprintf(\"输入第 %d 条边的开始顶点编号和结束定点编号：\", i);\n\tscanf(\"%d %d\", &start, &end);\n\t// 因为是无向图，所以每一条无向边可以看成双向的有向边 \n\tgraph[start][end] = graph[end][start] = 1;\n\n\t/* 对邻接表进行操作：\n\t *为保存顶点信息的结构体指针申请空间\n\t */ \n\tpoint = (Node *) malloc(sizeof(Node));\n\tpoint->number = end;\n\t// 将编号为 end 的顶点插入到邻对应单链表的头结点后面 \n\tpoint->next = node[start]->next;\n\tnode[start]->next = point;\n\t// 和编号为 start 的顶点相连的顶点个数 +1  \n\tnode[start]->number++; \n\t\n\t// 为保存顶点信息的结构体指针申请空间 \n\tpoint = (Node *) malloc(sizeof(Node));\n\tpoint->number = start;\n\t// 将编号为 start 的顶点插入到邻对应单链表的头结点后面 \n\tpoint->next = node[end]->next;\n\tnode[end]->next = point;\n\t// 和编号为 end 的顶点相连的顶点个数 +1  \n\tnode[end]->number++; \n}\nprintf(\"图的邻接矩阵：\\n\"); \nfor(i = 1; i <= nodeSum; i++) {\n\tfor(j = 1; j <= nodeSum; j++) {\n\t\tprintf(\"%d \", graph[i][j]);\n\t}\n\tprintf(\"\\n\");\n}\nprintf(\"图的邻接表：\\n\"); \nfor(i = 1; i <= nodeSum; i++) {\n\tpoint = node[i];\n\tprintf(\"和顶点 %d 连接的顶点数：%d，其单链表为：%d\", i, point->number, i);\n\tpoint = point->next;\n\twhile(point != NULL) {\n\t\tprintf(\" --> %d\", point->number);\n\t\tpoint = point->next;\n\t}\n\tprintf(\"\\n\");\n} \n\nprintf(\"通过邻接矩阵来广度优先遍历图的顶点：\\n\"); \n// 从顶点1 开始遍历图 \nbfsMatrix(1, nodeSum); \n// 将顶点的访问标记初始化用于进行邻接表的深度优先遍历 \nmemset(visit, 0, sizeof(visit));\nprintf(\"\\n通过邻接表来广度优先遍历图的顶点：\\n\"); \n// 从顶点1 开始遍历图\nbfsList(1, nodeSum);\n\nreturn 0;\n}\n\n\t",
      "code_language": -1,
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 2
  },
  {
    "basicData": {
      "text": "\n依然以上图中无向无权图作为数据源，看看程序运行结果：\n\t",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "tu_7.png",
      "parent_dir_path": "datastruct/图"
    },
    "contentType": 1
  }
]