{"contentList": [{"basicData":{"text":"\n图的遍历是指按照某种算法来对整个图的顶点进行访问，当图中所有的顶点都被访问完了之后图的遍历就结束。\n\n但是要注意的一点是图的遍历是通过边来进行的，所以要求要遍历的图是一个连通图，否则就不能访问到所有顶点。\n\n关于连通图的概念请参考\"图的简介\"部分内容。\n这里要介绍的是图的深度优先遍历：\n深度优先遍历也叫深度优先搜索(Depth First Search)，是遍历连通图的一种算法思想。\n其基本步骤如下：\n设 n 是当前被访问顶点，在对 n 做过访问标记后，通过边(n, i) 选择一个与顶点 n 相连的并且未被访问过的顶点 i 。\n\n若发现顶点 i 已访问过，则重新通过边(n, k) 选择一个与顶点 n 相连的并且未被访问过的顶点 k，\n否则沿边(n, i)到达未曾访问过的 i顶点，对 i 访问并将其标记为已访问过；换行\"\n然后从 i 开始重复这个搜索过程，直到搜索完从 i 出发的所有路径，即访问完所有从 i 顶点出发可达的顶点之后，\n再回溯到顶点 n ，并且再选择一条从 n 顶点出发的未检测过的边。\n上述过程直至从 n 出发的所有边都已检测过为止。\n\n基于深度优先遍历的思想，采用递归的形式实现其算法会比较简单。\n\n\t"},"contentType":0},{"basicData":{"image_url":"tu_5.png"},"contentType":1},{"basicData":{"text":"\n以上图给出的无向图为例，假设从 1 号顶点开始对图进行深度优先遍历，首先打印出顶点1 的信息，并且标记 1 号顶点已经被访问，接下来寻找和顶点1 相连的编号最小的顶点，很明显是顶点2 ，检查顶点2 是否被访问，在这里顶点2 还没有被访问，那么打印出顶点2 的信息，并且标记顶点2 已经被访问；\n接下来从顶点2 开始，寻找和顶点2 相连的编号最小的顶点，这里我们就找到了顶点1 ，但是因为顶点1 刚刚已经被标记为已访问，所以不能访问顶点1，\n那么继续寻找和顶点2 相连的编号最小的顶点，这时我们找到了顶点4 ，并且顶点4 还没有被访问，所以打印出顶点 4 的信息；\n\n并且从顶点 4开始继续寻找和顶点4 相连的编号最小的顶点，这时找到了顶点1 ，但是顶点1 已经被标记为已经被访问过了；\n\n所以我们寻找下一个和顶点4 相连的编号最小的顶点，这一次我们找打了顶点 2，\n但是同样的顶点2 也是刚刚被标记为已经被访问过了；\n所以我们还需要继续寻找，接下来我们找到了顶点3，\n并且顶点3 未被访问过，所以我们打印出顶点3 的信息并且从顶点3 开始继续以上过程；\n\n因为到现在所有顶点都已经被访问过了，所以顶点3 的搜索结束了，那么回溯到上一个顶点：顶点 4；\n因为顶点4 的所有边都被访问过了，所以继续回溯到顶点2；\n\n同样的，此时顶点2 的所有边也访问过了，那么回溯到顶点1 ，因为所有顶点都已经被访问过了，所以对顶点1 的搜索也结束了。\n\n那么整个深度优先遍历结束，顶点访问的顺序为：1 --> 2 --> 4 --> 3 。\n\n如果读者不太理解这个过程可以在草稿纸模拟一遍。\n到这里我想读者应该能理解为什么深度优先遍历适用于连通图，\n因为整个算法都是通过图的边来进行对顶点的访问，如果图不连通，那么有某些顶点不能被访问到。\n\n关于图的深度优先遍历的实现，请参考\"动画\"和\"代码\"部分。\n\n\t"},"contentType":0},{"basicData":{"animation_name":"图:深度优先遍历"},"contentType":4},{"basicData":{"code":"\n\n/**\n* 实现无权无向连通图的深度优先遍历：通过邻接矩阵和邻接表两种方式\n* Author：指点 \n*/\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n// 表示图的顶点最大数\n#define MAX_NODE_SUM 1000\n// 储存图信息的临接矩阵\nint graph[MAX_NODE_SUM][MAX_NODE_SUM];\n\n// 储存图顶点信息的结构体：顶点编号(number)、指向和链表头结点代表的顶点相连的下一个顶点的指针(next)\ntypedef struct Node {\nint number;\nstruct Node *next;\n}Node; \n// 储存图的邻接表中单链表头结点的指针数组 \nNode *node[MAX_NODE_SUM] = {NULL};\n// 标志顶点是否被访问过的数组：0(未被访问)，1(已经被访问) \nint visit[MAX_NODE_SUM];\n\n// 通过邻接矩阵从编号为 n 的顶点开始对图进行深度优先遍历，nodeSum 为图的顶点总数 \nvoid dfsMatrix(int n, int nodeSum) {\nint i;\n// 选择一个与顶点 n 相连的并且未被访问过的顶点 i 。\n\nfor(i = 1; i <= nodeSum; i++) {\n\t/* 如果顶点 n 和顶点 i 之间有边相连并且顶点 i 还未被访问，\n\t * 那么打印顶点编号并且标记顶点 i 已经被访问  \n\t */\n\tif(graph[n][i] == 1 && visit[i] == 0) {\n\t\tprintf(\" --> %d\", i);\n\t\t// 标记编号为 i 的顶点为已经被访问状态 \n\t\tvisit[i] = 1;\n\t\t// 继续从顶点 i 开始遍历图 \n\t\tdfsMatrix(i, nodeSum);\n\t\tbreai; \n\t}\n}\n} \n\n// 通过邻接表从编号为 n 的顶点开始对图进行深度优先遍历，nodeSum 为图的顶点总数 \nvoid dfsList(int n, int nodeSum) {\nNode *point = node[n]->next;\nwhile(point != NULL) {\n\t/* 如果和顶点 n 相连的当前顶点还未被访问，\n\t * 那么打印顶点编号并且标记当前顶点已经被访问\n\t * 因为邻接表中在同一条单链表里面储存的都是和头结点有边相连的顶点(和顶点 n 相连)，\n\t * 所以无需判断其中的顶点和是否和编号为 n 的顶点是否相连\n\t */\n\tif(visit[point->number] == 0) {\n\t\tprintf(\" --> %d\", point->number);\n\t\t// 标记当前顶点为已经被访问状态 \n\t\tvisit[point->number] = 1;\n\t\t// 继续从当前顶点开始遍历图 \n\t\tdfsList(point->number, nodeSum); \n\t}\n\tpoint = point->next; \n}\n}\n\nint main() {\n// 图的顶点数和边数\nint nodeSum, edgeSum;\n// 边的开始顶点编号和结束顶点编号\nint start, end;\n// 为顶点申请内存空间的中间指针变量 \nNode *point = NULL; \nint i, j;\nprintf(\"输入图的顶点数和边数：\");\nscanf(\"%d %d\", &nodeSum, &edgeSum);\nif(nodeSum <= 0) {\n\treturn 0;\n}\n// 为邻接表中每一个顶点所在单链表的头结点申请空间 \nfor(i = 1; i <= nodeSum; i++) {\n\tnode[i] = (Node *) malloc(sizeof(Node));\n\tnode[i]->number = 0;\n\tnode[i]->next = NULL;\n} \nfor(i = 1; i <= edgeSum; i++) {\n\tprintf(\"输入第 %d 条边的开始顶点编号和结束顶点编号：\", i);\n\tscanf(\"%d %d\", &start, &end);\n\t// 因为是无向图，所以每一条无向边可以看成双向的有向边 \n\tgraph[start][end] = graph[end][start] = 1;\n\n\t/* 对邻接表进行操作：\n\t *为保存顶点信息的结构体指针申请空间\n\t */ \n\tpoint = (Node *) malloc(sizeof(Node));\n\tpoint->number = end;\n\t// 将编号为 end 的顶点插入到邻对应单链表的头结点后面 \n\tpoint->next = node[start]->next;\n\tnode[start]->next = point;\n\t// 和编号为 start 的顶点相连的顶点个数 +1  \n\tnode[start]->number++; \n\t\n\t// 为保存顶点信息的结构体指针申请空间 \n\tpoint = (Node *) malloc(sizeof(Node));\n\tpoint->number = start;\n\t// 将编号为 start 的顶点插入到邻对应单链表的头结点后面 \n\tpoint->next = node[end]->next;\n\tnode[end]->next = point;\n\t// 和编号为 end 的顶点相连的顶点个数 +1  \n\tnode[end]->number++; \n}\n\nprintf(\"图的邻接矩阵：\\n\"); \nfor(i = 1; i <= nodeSum; i++) {\n\tfor(j = 1; j <= nodeSum; j++) {\n\t\tprintf(\"%d \", graph[i][j]);\n\t}\n\tprintf(\"\\n\");\n}\nprintf(\"图的邻接表：\\n\"); \nfor(i = 1; i <= nodeSum; i++) {\n\tpoint = node[i];\n\tprintf(\"和顶点 %d 连接的顶点数：%d，其单链表为：%d\", i, point->number, i);\n\tpoint = point->next;\n\twhile(point != NULL) {\n\t\tprintf(\" --> %d\", point->number);\n\t\tpoint = point->next;\n\t}\n\tprintf(\"\\n\");\n} \n\nprintf(\"\\n通过邻接矩阵深度优先遍历图: \\n\"); \n// 从顶点 1 开始遍历图： \nprintf(\"1\");\nvisit[1] = 1;\ndfsMatrix(1, nodeSum);\n// 将顶点的访问标记初始化用于进行邻接表的深度优先遍历 \nmemset(visit, 0, sizeof(visit)); \nprintf(\"\\n通过邻接表深度优先遍历图: \\n\"); \n// 从顶点 1 开始遍历图： \nprintf(\"1\");\nvisit[1] = 1;\ndfsList(1, nodeSum);\n\nreturn 0;\n}\n\t","code_language":-1},"contentType":2},{"basicData":{"text":"\n以上方给出的图中的无权无向图的数据为数据源，运行程序，结果如下：\n\t"},"contentType":0},{"basicData":{"image_url":"tu_6.png"},"contentType":1}]}