<?xml version="1.0" encoding="UTF-8"?>

<contents>
	<text>
对于选择排序，可能大家没有怎么用过，其实选择排序和冒泡排序有点类似，我们知道，假设使用冒泡排序对一个数组进行从小到大排序，如果我们从左向右边扫描数组，那么第一趟扫描的目的是将数组中最大的数放在数组的最右边。
第二趟扫描的目的是将数组中第二大的数放在数组的倒数第二个位置....
那么现在我们使用选择排序对数组进行从小到大排序，同样的，如果我们还是从左向右边扫描数组。
此时我们第一趟的目的就变成了将数组中最小的元素放到数组的第一个元素，
第二趟排序的目的就变成了将数组中第二小的元素放到数组的第二个元素中... "换行"
当所有的数组元素都放置完毕之后整个数组元素就变得有序。接下来通过一个例子来看一下具体实现方法："换行"
假设我们现在要用选择排序对数组 3 1 2 5 4 从小到大排序。首先，我们先做好准备工作，一开始准备两个变量 i j。并且将 i 指向数组第一个元素（元素 3）。"换行"
第一趟扫描，先将 j 指向 i 后面一个数组元素（此时为元素 1），然后比较 i 和 j 指向的数组元素的值的大小：3 大于 1，不符合排序规则，因此交换这两个数组元素，完成之后数组元素变成了：1 3 2 5 4 。之后 j 指向后面一个数组元素（j++），再比较 i 和 j 所指向的数组元素的值的大小：1 小于 2，符合排序规则，j 继续向后移动（j++），再比较 i 和 j 所指向的数组元素的值的大小：1 小于 5，符合排序规则，j 继续向后移动（j++），再比较 i 和 j 所指向的数组元素的值的大小：1 小于 4，符合排序规则，此时 j 已经到达了数组的最后一个元素。那么第一趟扫描结束。此时的数组元素为：1 3 2 5 4 。
此时将 i 向后移（i++），指向元素 3，即为第二趟扫描做准备。"换行"
第二趟扫描，先将 j 指向 i 后面一个元素（此时为元素 2），然后比较 i 和 j 所指向的数组元素的值的大小：3 大于 2，不符合排序规则，交换这两个数组元素，完成之后数组元素变成了：1 2 3 5 4 。之后 j 向后移动（j++），再比较 i 和 j 所指向的数组元素的值的大小：2 小于 5，符合排序规则，j 继续向后移动（j++），再比较 i 和 j 所指向的数组元素的值的大小：2 小于 4，符合排序规则，此时 j 已经到达了数组的最后一个元素。那么第二趟扫描结束。此时的数组元素为：1 2 3 5 4 。
此时将 i 向后移（i++），指向元素 3 ，即为第三趟扫描做准备。"换行"
第三趟排序，同样的，先将 j 指向 i 后面的一个元素（此时为元素 5），然后比较 i 和 j 所指向的数组的元素的值得大小：3 小于 5，符合排序规则，j 向后面移动（j++），再比较 i 和 j 所指向的数组元素的值的大小：3 小于 4，符合排序规则，此时 j 已经到达了数组的最后一个元素。那么第三趟扫描结束。此时的数组元素为：1 2 3 5 4 。
此时将 i 向后移（i++），指向元素 5 ，即为第四趟扫描做准备。"换行"
第四趟排序，将 j 指向 i 后面的一个元素（此时为元素 4），然后比较 i 和 j 所指向的元素的大小：5 大于 4，不符合排序规则，交换这两个数组元素，完成之后数组元素变成了：1 2 3 4 5 。
此时 j 已经到达了数组的最后一个元素。那么第四趟扫描结束。此时的数组元素为：1 2 3 4 5 。我们注意到，此时 已经进行了 4 趟扫描。每一趟扫描有一个数组元素在正确的数组下标位置上，也就是说现在已经有 4 个元素已经排好序（从小到大分别在数组中第一到第四个元素的位置）。总共有 5 个元素，那么最后一个肯定在数组的第五个元素的位置，所以其实现在数组已经是有序的了。我们在此时结束排序算法。"换行""换行"
关于选择排序的实现，请参考"动画" 和 "代码"部分。
	</text>
	<animation html_path="">排序:选择排序</animation>
	<code>

/**
*  C语言实现选择排序
* Author：指点 
*/ 
#include &lt;stdio.h&gt;
#define N 5

// 选择排序第一个版本的实现，将数组元素从小到大排序 
void selectSort1(int a[], int n) {
int i, j, t;
// 双重循环，外层循环实现扫描，内层循环实现比较 
for (i = 0; i &lt; n-1; i++) {
	for (j = i+1; j &lt; n; j++) {
		/* 如果前面的数组元素值大于后面的数组元素值（不符合排序规则）， 
		那么交换两个数组元素*/ 
		if (a[i] &gt; a[j]) {
			t = a[i];
			a[i] = a[j];
			a[j] = t;
		}
	}
}
}

// 选择排序第二个版本的实现，将数组元素从小到大排序 
void selectSort2(int a[], int n) {
int i, j, t;
int minIndex; // 当前未排好序的数组元素中最小的元素值的下标 
// 双重循环，外层循环实现扫描，内层循环实现比较 
for(i = 0; i &lt; n-1; i++) {
	minIndex = i;
	for (j = i+1; j &lt; n; j++) {
		// 比较，找出当前未排好序的数组元素中值最小的数组元素的下标 
		if (a[minIndex] &gt; a[j]) {
			minIndex = j;
		}
	}
	/* 如果当前还未排好序的数组元素中值最小的元素下标不等于 i ，
	那么交换这两个数组元素*/ 
	if (minIndex != i) {
		t = a[minIndex];
		a[minIndex] = a[i];
		a[i] = t;
	}
} 
}

int main() {
int a[N] = {3, 1, 2, 5, 4};
int i = 0;

printf("排序前的数组元素：");
for (; i &lt; N; i++) {
	printf("%d ", a[i]);
}

selectSort1(a, N);
//	selectSort2(a, N); 

printf("\n排序后的数组元素：");
for (i = 0; i &lt; N; i++) {
	printf("%d ", a[i]);
}

return 0;
} 
	</code>
	<text>
上面的代码中展示了两个有细小差别的选择排序代码版本，但这只是针对代码实现方面的，其基本思想仍然一致。
小伙伴可以仔细思考一下两个版本中哪个版本的代码在优化上更胜一筹。"换行"
我们很容易可以看出选择排序的时间复杂度为 O(n*n)。最后来看一下程序运行结果：
	</text>
	<img>
选择排序_1.png
	</img>
</contents>