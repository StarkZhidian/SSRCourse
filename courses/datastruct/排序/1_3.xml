<?xml version="1.0" encoding="UTF-8"?>

<contents>
	<text>
冒泡排序可谓是我们最常用的排序算法了，不过如果不对它进行优化，它的时间复杂度是 O(n*n)，
相对于一些高效的排序算法来说还是比较高的，但是其容易实现，这也是为什么这个算法仍是常用的排序算法之一。"换行"
冒泡排序的思想是每趟排序中扫描数组中还未排好序的数字，扫描过程中不断比较两个相邻元素的大小，如果不符合指定的排序规则（从大到小或者是从小到大），那么交换两个相邻元素的值。"换行"
关于扫描的方向（从左到右或者是从右到左）冒泡排序没有明确的规定，你可以每次从左到右扫描，也可以从右到左扫描，选择不同的扫描方向，在比较两个相邻元素大小的时候注意对应不同的处理就好了。"换行""换行"
假设这里定义冒泡排序的排序规则为从小到大排序，扫描方向为从左到右扫描。"换行"
那么第一趟扫描的目标为将数组中最大的的元素置于数组最后一个位置（扫描的过程中不断比较两个相邻的数字，并且将较大的数字放在靠右边的数组元素中）。"换行"
那么第一趟扫描的目标为将数组中第二大的的元素置于数组倒数第二个位置（最大的元素在第一次扫描的过程已经放在了数组的最右边位置） ... 持续这个步骤，直到所有元素都排好序。"换行""换行"
假设现在我们要用冒泡排序来对数组 3 1 2 4 5 从小到大排序。"换行"
一、从左向右扫，把数组元素中最大的元素移动到下标为 4（数组最右边元素） 的位置："换行"
首先，比较第一个元素和第二个元素，此时，3 大于 1，
左边的数组元素大于右边的数组元素，不符合排序规则，需要交换两个元素的位置。交换完成后数组元素为：1 3 2 4 5 。"换行"
接下来继续向右边扫描：3 大于 2 ，同样不符合排序规则，交换两个数组元素，交换完成后的数组元素为：1 2 3 4 5 。"换行"
同样，继续向右扫描：3 小于 4，符合排序规则，无需交换元素位置，继续向右扫描：4 小于 5，也无需交换元素位置。至此，第一次扫描结束，数组中最大的元素（5）已经在数组的最右边位置。数组元素为：1 2 3 4 5 。"换行"
二、开始第二次从左向右扫描，同样的先是 1 和 2 比较，无需交换，继续向右扫描... "换行"
当完成这一趟扫描之后，我们会发现没有任何数组元素进行位置交换，因为第二次扫描时一开始数组元素就已经是从小到大排好序的了。"换行"
每一轮扫描过程如果没有任何元素进行交换，那么证明数组已经有序，所以我们可以直接退出排序过程。"换行""换行"
关于冒泡排序的实现，请参考"动画" 和 "代码"部分。
	</text>
	<animation html_path="" animation_name="排序:冒泡排序"></animation>
	<code>

/**
* C语言实现冒泡排序
* Author：指点 
*/ 
#include &lt;stdio.h&gt;
#define N 1100

int a[N];

// 使用冒泡排序对含有 n 个元素的数组 a 进行从小到大排序 
void bubbleSort(int a[], int n) {
// flag 用于标志每一轮是否有元素交换了，如果没有，那么证明数组已经有序 
int i, j, t, flag;
for(i = 0; i &lt; n; i++) {
	flag = 0;
	// 从后面开始往前面扫 
	for(j = n-1; j &gt; i; j--) {
		// 如果不符合从小到大的顺序，那么交换两个相邻的元素并且将交换标志置为 1  
		if(a[j] &lt; a[j-1]) {
			flag = 1;
			t = a[j];
			a[j] = a[j-1];
			a[j-1] = t;
		}
	}
	// 如果一轮过去之后交换标志还是 0 ，那么证明数组元素已经有序，退出循环 
	if(flag == 0) {
		break;
	}
}
}

// 输出含有 n 个元素的数组 
void print(int a[], int n) {
int i;
for(i = 0; i &lt; n; i++) {
	printf("%d ", a[i]);
}
printf("\n");
} 

int main() {
int n, i;
printf("输入元素个数：(1~1100)：");
scanf("%d", &amp;n);
// 对输入的范围进行判断 
if(n &lt;= 0 || n &gt; 1100) {
	return 0;
}
printf("输入%d个整数：\n", n);
for(i = 0; i &lt; n; i++) {
	scanf("%d", a+i);
}

bubbleSort(a, n);
printf("排序后的数组：\n");
print(a, n); 

return 0;
} 
	</code>
	<text>
看看程序的运行结果：
	</text>
	<img>
冒泡排序_1.png
	</img>
	<text>
样例通过，这里的代码的平均时间复杂度为 O(n^n)，速度相比快速排序等时间复杂度为 O(n*logn) 的排序还是慢了点，但是其对于一些特殊的数组比如很多元素已经是有序的状态的数组有较好的效果，
并且如果在中途某趟扫描完成后将数组排好序，那么可以直接结束排序，在某种程度上减小了程序的时间复杂度。
	</text>
</contents>