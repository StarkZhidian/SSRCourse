{"contentList": [{"basicData":{"text":"\n如果要使用堆排序，我们先得熟悉数据结构：二叉堆，因为堆排序就是在二叉堆的基础上进行的。\n关于二叉堆的相关知识，在“树”模块中的知识点中有介绍。小伙伴可以先看一下。\n\n我们知道二叉堆有最小堆和最大堆之分。最小堆即为二叉堆的堆顶元素值不大于其左右子节点的值，\n最大堆即为二叉堆的堆顶元素值不小于其左右子节点的值，请注意，堆的左右子树亦是堆。\n\n那么，如果要将元素从小到大排序，我们就要建立一个最小堆来储存要排序的数，如果要将元素从大到小排序，我们就需要建立一个最大堆来储存要排序的数。\n\n那么现在假设我们需要用堆排序来对一个数组的元素从小到大排序。首先，我们要创建一个存有要排序的数组元素的最小堆。\n\n接下开始排序过程：从当前最小堆中取出堆顶元素，根据最小堆的特性我们知道堆顶元素即为当前堆中最小的元素。之后我们将这个最小堆的最后一个叶子节点作为新的堆顶，并且再次执行构造最小堆的过程...... 不断的重复这个过程，直到整个堆为空，那么我们在这个过程中取出的堆顶元素的值按取出的先后顺序排列就是从小到大有序的。\n\n\n既然知道了从小到大排序的方法，那么我想从大到小排序也很容易理解了。这里就不再重复了。\n\n关于堆排序的实现，请参考\"动画\"  和 \"代码\"部分。\n\t"},"contentType":0},{"basicData":{"animation_name":"排序:堆排序"},"contentType":4},{"basicData":{"code":"\n\n/**\n* C语言实现堆排序\n* Author：指点\n*/\n#include <stdio.h>\n#define N 5\n\n// 构造最小堆，currentIndex 为当前要构造的堆的根节点下标，n 为数组元素总数 \nvoid createMinHeap(int currentIndex, int a[], int n) {\n// 左右子节点所在数组的下标，请注意数组元素从 0 开始 \nint leftChild = currentIndex*2 + 1;\nint rightChild = currentIndex*2 + 2;\n/* 判断当前节点是否有左右孩子节点，如果没有，\n  证明当前节点为叶子节点，那么无需进行堆排序 */ \nif (leftChild >= n && rightChild >= n) {\n\treturn ;\n}\nint t; // 交换节点值所用的临时变量 \n// 保存当前节点和其左右孩子节点的最小值所在数组下标和节点的最小值 \nint minIndex = currentIndex;\nint minValue = a[currentIndex];\n// 找出当前节点和其左右孩子节点中节点值较小的节点 \nif (minValue > a[leftChild]) {\n\tminIndex = leftChild;\n\tminValue = a[leftChild];\n} \nif (minValue > a[rightChild]) {\n\tminIndex = rightChild;\n\tminValue = a[rightChild];\n}\n/* 如果最小值节点不为当前节点，\n那么交换两节点的值并且对 maxIndex 指向的节点构造最小堆 */ \nif (minIndex != currentIndex) {\n\tt = a[minIndex];\n\ta[minIndex] = a[currentIndex];\n\ta[currentIndex] = t;\n\t// 对 minIndex 所指向二叉堆节点构造最小堆 \n\tcreateMinHeap(minIndex, a, n); \n} \n}\n\n// 构造最大堆，currentIndex 为当前要构造的堆的根节点下标，n 为数组元素总数 \nvoid createMaxHeap(int currentIndex, int a[], int n) {\n// 左右子节点所在数组的下标，请注意数组元素从 0 开始 \nint leftChild = currentIndex*2 + 1;\nint rightChild = currentIndex*2 + 2;\n/* 判断当前节点是否有左右孩子节点，如果没有，\n  证明当前节点为叶子节点，那么无需进行堆排序 */ \nif (leftChild >= n && rightChild >= n) {\n\treturn ;\n}\nint t; // 交换节点值所用的临时变量 \n// 保存当前节点和其左右孩子节点的最大值所在数组下标和节点的最大值 \nint maxIndex = currentIndex;\nint maxValue = a[currentIndex];\n// 找出当前节点和其左右孩子节点中节点值较大的节点 \nif (maxValue < a[leftChild]) {\n\tmaxIndex = leftChild;\n\tmaxValue = a[leftChild];\n} \nif (maxValue < a[rightChild]) {\n\tmaxIndex = rightChild;\n\tmaxValue = a[rightChild];\n}\n/* 如果最大值节点不为当前节点，\n那么交换两节点的值并且对 maxIndex 指向的节点构造最大堆 */ \nif (maxIndex != currentIndex) {\n\tt = a[maxIndex];\n\ta[maxIndex] = a[currentIndex];\n\ta[currentIndex] = t;\n\t// 对 maxIndex 所指向二叉堆节点构造最大堆 \n\tcreateMaxHeap(maxIndex, a, n); \n} \n}\n\n// 从小到大进行堆排序 \nvoid heapSortIncrease(int a[], int n) {\nint result[n]; // 保存排序结果的数组 \nint resIndex = 0;\nint i = 0;\n// 从第一个不是叶子节点开始构造最小堆 \nfor (i = N/2; i >= 0; i--) {\n\tcreateMinHeap(i, a, n);\n}\n// 进行堆排序，当堆中元素个数为 0 时结束 \nwhile (n) {\n\t// 依次取出堆顶元素并且保存 \n\tresult[resIndex++] = a[0];\n\t// 将最后一个叶子节点值复制到根结点中，即为将最后一个叶子节点作为新的根结点 \n\ta[0] = a[n-1];\n\t// 剔除最后一个叶子节点（其已经作为根结点） \n\tn--;\n\t// 重新构造最小堆 \n\tcreateMinHeap(0, a, n);\n}\nprintf(\"从小到大堆排序的结果：\");\nfor (i = 0; i < resIndex; i++) {\n\tprintf(\"%d \", result[i]);\n} \nprintf(\"\\n\");\n}\n\n// 从大到小进行堆排序 \nvoid heapSortDecrease(int a[], int n) {\nint result[n]; // 保存排序结果的数组 \nint resIndex = 0;\nint i = 0;\n// 从第一个不是叶子节点开始构造最大堆 \nfor (i = N/2; i >= 0; i--) {\n\tcreateMaxHeap(i, a, n);\n}\n// 进行堆排序，当堆中元素个数为 0 时结束 \nwhile (n) {\n\t// 依次取出堆顶元素并且保存 \n\tresult[resIndex++] = a[0];\n\t// 将最后一个叶子节点值复制到根结点中，即为将最后一个叶子节点作为新的根结点 \n\ta[0] = a[n-1];\n\t// 剔除最后一个叶子节点（其已经作为根结点） \n\tn--;\n\t// 重新构造最大堆 \n\tcreateMaxHeap(0, a, n);\n}\nprintf(\"从大到小堆排序的结果：\");\nfor (i = 0; i < resIndex; i++) {\n\tprintf(\"%d \", result[i]);\n} \nprintf(\"\\n\");\n}\n\nint main() {\nint a[N] = {3, 2, 1, 5, 4};\nint b[N] = {3, 2, 1, 5, 4};\nint i = 0;\n\nprintf(\"排序前的数组：\");\nfor (; i < N; i++) {\n\tprintf(\"%d \", a[i]);\n} \nprintf(\"\\n\");\n// 从小到大排序 \nheapSortIncrease(a, N);\t\n\nprintf(\"\\n\\n\");\n\nprintf(\"排序前的数组：\");\nfor (i = 0; i < N; i++) {\n\tprintf(\"%d \", b[i]);\n} \nprintf(\"\\n\");\n// 从大到小排序\nheapSortDecrease(b, N); \n\nreturn 0;\n} \n\t","code_language":-1},"contentType":2},{"basicData":{"text":"\n看起来代码挺多，但其实主要的逻辑都是在 heapSortIncrease(int a[], int n) 函数和 heapSortDecrease(int a[], int n)\t。因为创建最小堆和创建最大堆的操作其实是属于“二叉堆”部分的内容。如果你理解了二叉堆，相信这个代码对你来说没有多大难度。\n\n最后说一下堆排序的时间复杂度，我们知道，创建最小堆/最大堆的时间复杂度为 O(logn)。在这里排序的过程中，我们每从堆顶取出一个元素都要重新创建一次最小堆/最大堆，数组元素一共有 n 个，因此整个堆排序的时间复杂度为 O(n*logn)，算是一个高效的排序算法了，但是因为其实现过程较为复杂，因此在一般的应用中并不是很常用，大家更喜欢用代码简短而效率高的快速排序，但是这并不是我们不掌握堆排序的理由，多掌握一种算法总没有坏处。\n\n好了，最后来看一下程序运行结果：\n\t"},"contentType":0},{"basicData":{"image_url":"堆排序_1.png"},"contentType":1}]}