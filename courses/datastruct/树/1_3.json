[
  {
    "basicData": {
      "text": "\n二叉搜索树（Binary Search Tree）的定义： \n它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；\n 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；\n 它的左、右子树也分别为二叉搜索树。\n \n很明显又是一个递归的定义，定义还是挺好理解的，就是说一棵二叉树任意指定一个节点，\n如果这个节点的所有左子节点都小于这个节点的值并且所有的右子节点都大于这个节点，\n那么这棵二叉树就是二叉搜索树。\n在计算机术语中，二叉搜索树又叫二叉查找树、二叉排序树。\n\n下面是一颗常见的二叉搜索树：\n\t",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "shu_5.png",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n既然说了是二叉搜索树，那么重点功能肯定是在搜索上面，但是在此之前我们要想想怎么去构造一个二叉搜索树。\n\n换句话来说就是怎么向二叉搜索树中插入新的节点，假设我们要插入一个值为 n 的节点，\n根据定义，首先如果根节点为空，那么直接新建节点并将数据值赋值为 n 作为根节点，否则的话就要分情况讨论：\n\n如果 n 大于当前节点的数据值，那么将 n 插入到当前节点的右子树中，如果 n 小于当前节点的数据值，\n那么将 n 插入到当前节点的左子树中，如果 n 等于当前节点的数据值，那么无需插入，直接返回。\n\n接下来是关于查找操作，有了上面的基础，做查找就简单了：假设现在需要找数据值为 n 的节点，先从根节点开始查找，\n如果当前节点的数据值等于 n ，那么直接返回当前节点的指针，如果当前节点的值大于 n ，那么递归查找当前节点的左子树，\n如果当前节点的值小于 n ，那么递归查找当前节点的右子树。\n如果当前节点指针为空，那么证明没找到。\n\n最后是删除节点操作，这部分是最麻烦的：\n\n假设现在需要删除数据值为 n 的节点，首先，要删除节点，先得找到节点，\n这里和查找操作类似，通过递归来完成，找到节点之后，我们要对节点的情况进行讨论，如图：\n\t",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "shu_6.png",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 1
  },
  {
    "basicData": {
      "text": "\n在上图中，编号为 1 的是一种情况：要删除的节点没有左右子树，编号为 2 3 4 的是一种情况：要删除的节点存在左右子树。\n\n我们要对这两种情况分别处理：第一种情况好办。\n因为没有左右子树，其实就是叶子节点，直接删除就行了；\n\n第二种情况我们需要把要删除的节点的子树和上面\"连起来\"，即我们需要找到一个节点来替代这个要被删除的节点，\n怎么去选择这个替代的节点呢？这里有两种选择：要删除的节点的左子树中的最右边的节点、要删除的节点的右子树中的最左边的节点。\n为什么要选择这两个节点呢？这个问题留给大家自己思考。\n最后，还需要对删除的节点是否是根节点进行处理。\n\n关于二叉搜索树的基本操作的实现，请参考\"动画\"和\"代码\"部分。\n\n\n关于非递归版本的代码，可以参考这篇博客：\n\t",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "animation_name": "树:二叉搜索树",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 4
  },
  {
    "basicData": {
      "code": "\n\n/**\n* 二叉搜索树的基本操作：\n* 二叉树节点储存的数据类型为 int 类型，如有需要请自行更改 \n* Author：指点 \n*/ \n#include <stdio.h>\n#include <stdlib.h> \n\n// 定义二叉树节点的结构体，包括：数据域、指向双亲节点的指针、指向左右孩子节点的指针 \ntypedef struct Node {\nint data;\nstruct Node *leftChild; \nstruct Node *rightChild;\n}Node; \n\n// 定义二叉树的根节点：\nNode *root = NULL; \n\n/* 向二叉搜索树中从 now 指向的节点的指针的地址开始，\n插入数据值为 n 的新节点 */\nvoid insert(int n, Node **now) {\n// 如果根节点为空，那么直接把 n 作为根节点的数据值并结束 \nif(root == NULL) {\n\troot = (Node *) malloc(sizeof(Node)); \n\troot->leftChild = root->rightChild = NULL;\n\troot->data = n;\n\treturn ;\n}\n// 如果当前节点指针为空，那么证明已经到达树的末尾，进行节点插入操作： \nif(*now == NULL) {\n\t*now = (Node *) malloc(sizeof(Node)); \n\t(*now)->data = n;\n\t(*now)->leftChild = (*now)->rightChild = NULL; \n\treturn ;\n}\n// 如果 n 的值大于当前节点的数据值，比较节点的右孩子 \nif((*now)->data < n) {\n\tinsert(n, &(*now)->rightChild); \n// 如果 n 的值小于当前节点的数据值，比较节点的左孩子 \n} else if((*now)->data > n) {\n\tinsert(n, &(*now)->leftChild); \n// 如果相等，那么证明这个节点已经存在，直接返回 \n} else {\n\treturn ;\n}\n}\n\n// 删除二叉搜索树中节点储存数据值为 n 的元素，成功返回 1 ，否则返回 0  \nint eraseNode(int n, Node *now, Node *parent) {\nNode *p = NULL, *del = NULL;\n// 如果当前查找的节点为空，那么证明二叉搜索树中不存在值为 n 的节点，返回 0 \nif(now == NULL) {\n\treturn 0;\n}\n// 如果当前节点的值大于 n，那么查找左子树 \nif(now->data > n) {\n\teraseNode(n, now->leftChild, now);\n// 如果当前节点的值小于 n，那么查找右子树 \n} else if(now->data < n) {\n\teraseNode(n, now->rightChild, now);\n// 如果相等，那么证明找到了这个节点，进行删除 \n} else {\n\tp = del = now;\n\t// 如果这个节点没有左右子树，即删除的是叶子节点 \n\tif(now->leftChild == NULL && now->rightChild == NULL) {\n\t\t// 如果双亲节点不为空，那么直接把父节点对应指针置空 \n\t\tif(parent != NULL) {\n\t\t\tif(n < parent->data) {\n\t\t\t\tparent->leftChild = NULL;\n\t\t\t} else {\n\t\t\t\tparent->rightChild = NULL;\n\t\t\t}\n\t\t}\n\t// 如果存在左子树或者右子树，那么进行讨论\t\t\t\n\t} else {\n\t\tif(now->leftChild != NULL) {\n\t\t\tnow = now->leftChild;\n\t\t\t// 找到左子树中的最右边的节点(右子树中值最小的节点) \n\t\t\twhile(now->rightChild != NULL) {\n\t\t\t\tp = now;\n\t\t\t\tnow = now->rightChild;\n\t\t\t}\n\t\t\t// 将左子树中的最右边的节点顶替要删除的这个节点以保持二叉搜索树的性质 \n\t\t\tif(parent != NULL) {\n\t\t\t\tif(n < parent->data) {\n\t\t\t\t\tparent->leftChild = now;\n\t\t\t\t} else {\n\t\t\t\t\tparent->rightChild = now;\n\t\t\t\t}\n\t\t\t// 删除的是根节点 \n\t\t\t} else {\n\t\t\t\tnow->leftChild = del->leftChild;\n\t\t\t\tnow->rightChild = del->rightChild; \n\t\t\t\troot = now;\n\t\t\t} \n\t\t\tp->rightChild = NULL;\n\t\t}else if(now->rightChild != NULL) {\n\t\t\tnow = now->rightChild;\n\t\t\t// 找到右子树中的最左边的节点(左子树中值最大的节点)\n\t\t\twhile(now->leftChild != NULL) {\n\t\t\t\tp = now;\n\t\t\t\tnow = now->leftChild;\n\t\t\t}\n\t\t\t// 将右子树中的最左边的节点顶替要删除的这个节点以保持二叉搜索树的性质 \n\t\t\tif(parent != NULL) {\n\t\t\t\tif(n < parent->data) {\n\t\t\t\t\tparent->leftChild = now;\n\t\t\t\t} else {\n\t\t\t\t\tparent->rightChild = now;\n\t\t\t\t}\n\t\t\t// 删除的是根节点 \n\t\t\t} else {\n\t\t\t\tnow->leftChild = del->leftChild;\n\t\t\t\tnow->rightChild = del->rightChild; \n\t\t\t\troot = now;\n\t\t\t} \n\t\t\tp->leftChild = NULL;\n\t\t}\n\t\tdel->leftChild = del->rightChild = NULL;\n\t\tfree(del);\n\t}\n}\nreturn 1; \n} \n\n// 查找节点数据值为 n 的节点，如果没找到，返回 NULL  \nNode *find(int n, Node *now) {\n// 如果当前查找的节点为空，那么证明没找到，返回 NULL \nif(now == NULL) {\n\treturn NULL;\n}\n// 如果当前节点数据值小于 n ，那么到右子树查找 \nif(n > now->data) {\n\tfind(n, now->rightChild);\n// 如果当前节点数据值大于 n ，那么到左子树查找\n} else if(n < now->data) {\n\tfind(n, now->leftChild); \n// 如果当前节点数据值等于 n ，那么证明找到了，返回节点指针 \n} else {\n\treturn now;\n}\n}\n\n// 通过递归的方式中序遍历二叉树，在这里即为从小到大遍历二叉搜索树 \nvoid inOrder(Node *node) {\n// 如果当前节点为空，那么证明下面已经没有节点可以访问了，直接返回 \nif(node == NULL) {\n\treturn ;\n} \n// 递归遍历左子树，然后输出当前节点的值，并递归遍历右子树 \ninOrder(node->leftChild); \nprintf(\"%d \", node->data);\ninOrder(node->rightChild);\n}\n\n\n\nint main() {\nNode *f = NULL;\n \ninsert(5, &root); \ninsert(3, &root);\ninsert(7, &root);\ninsert(2, &root);\ninsert(4, &root);\ninsert(6, &root);\n\ninOrder(root);\neraseNode(5, root, NULL);\n\nprintf(\"\\n\");\ninOrder(root);\n\nf = find(1, root);\nif(f != NULL) {\n\tprintf(\"\\n找到数据值为 %d 的节点\\n\", f->data);\n} else {\n\tprintf(\"\\n没有找到该节点\\n\");\n} \n\nf = find(2, root);\nif(f != NULL) {\n\tprintf(\"\\n找到数据值为 %d 的节点\\n\", f->data);\n} else {\n\tprintf(\"\\n没有找到该节点\\n\");\n} \n\nreturn 0;\n} \n\t",
      "code_language": -1,
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 2
  },
  {
    "basicData": {
      "text": "\n使用二叉搜索树来进行插入、查找、删除操作最佳的时间复杂度等于树的高度，即：O(log(n))。\n\nC++ 的 STL 模板中的 set 集合就是在一种改进的二叉搜索树(平衡二叉树)的基础上封装的容器。\n\n这里并不对平衡二叉树做过多的介绍。\n最后来看一下程序的运行结果：\n\t",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 0
  },
  {
    "basicData": {
      "image_url": "shu_7.png",
      "parent_dir_path": "datastruct/树"
    },
    "contentType": 1
  }
]