{"contentList": [{"basicData":{"text":"\n在数据结构中，堆是一种完全二叉树，那么完全二叉树是什么呢？\n\n设二叉树的深度为h，除第 h 层外，其它各层 (1~h-1) 的结点数都达到最大个数，\n第 h 层所有的结点都连续集中在最左边，那么这棵树就是完全二叉树。\n\n其实就是除了最后一层可以允许节点不排满以外，其余层(1~h-1)的节点都应该排满(2^(n-1) 个, 1>=n<=h-1)，\n最后一层的节点一定要从左开始逐渐向右连续排布。\n下面是完全二叉树和非完全二叉树的结构图：\n\t"},"contentType":0},{"basicData":{"image_url":"shu_8.png"},"contentType":1},{"basicData":{"text":"\n上图中完全二叉树和非完全二叉树的区别在于 5 号节点的位置，第二幅图中 2 号节点还没有右子树，\n根据定义，5 号节点应该作为 2 号节点的右子树排布(第一幅图)。\n\n对于完全二叉树来说，如果采用数组来储存二叉树节点，以上图为例，假设根节点(1 号节点)所在数组元素下标为 1，\n那么按从上到下、从左到右的顺序，2 号节点所在的数组下标为 2，3 号节点所在的数组下标为 3...\n\n我们会发现对于一个完全二叉树来说，如果其根节点存在左子树，那么左子树根节点的编号为它的编号的 2 倍，\n如果其根节点存在右子树，那么右子树根节点的编号为它的编号的 2 倍加 1。\n\n基于这个，我们在储存完全二叉树的时候可以采用数组的形式，因为编号相连(节点所在数组下标相连)，\n这样就不存在浪费数组空间的现象，因此对于堆的储存我们可以有两种方式：数组形式和链式形式。\n\n此外，对于堆来说，有\"最小堆\"和\"最大堆\"之分。\n\n最小堆：堆顶元素小于堆的任何一个直接子节点(左右子树的根节点)。\n \n最大堆：堆顶元素大于堆的任何一个直接子节点(左右子树的根节点)。\n \n请注意：堆的子树亦是堆。\n\n下面是最小堆和最大堆的结构图：\n\t"},"contentType":0},{"basicData":{"image_url":"shu_9.png"},"contentType":1},{"basicData":{"text":"\n请注意，图中的数字并不是代表树节点的编号，而是代表树节点储存的数值的值。\n\n关于堆的基本操作，请参考\"动画\"和\"代码\"部分。\n\n\t"},"contentType":0},{"basicData":{"animation_name":"树:二叉堆"},"contentType":4},{"basicData":{"code":"\n\n/**\n* 实现最大堆的基本操作： 创建堆、取堆顶元素、删除堆顶元素、向堆中插入元素 \n* 使用数组来保存堆元素，这里堆元素储存的类型是一个结构体\n* 结构体中保存的数据类型为 int 类型，使用了 typedef 关键字，如有需要请自行更改 \n*/\n#include <stdio.h>\n// 堆的最大储存元素个数\n#define  MAX_SIZE 1000\n// 堆中已经储存的元素个数 \nint nodeSum; \n\n// 以 int 类型为堆节点储存的数据类型\ntypedef int dataType;\n\n// 表示堆节点储存的数据类型的结构体 \ntypedef struct Element {\ndataType data;\n}Element;\n\n// 创建储存堆节点的数组 \nElement heap[MAX_SIZE];\n\n// 调整以编号为 n 的节点作为根节点的堆，使其成为一个最大堆 \nvoid maxHeap(int n) {\n// 编号为 n 的堆节点的左右孩子的节点所在数组下标 \nint l = 2*n;\nint r = l+1;\n// 储存最大值的堆节点所在数组下标 \nint large = n; \n// 用于进行交换的中间变量 \ndataType t; \n\n// 如果存在左孩子，那么比较左孩子和当前节点的值的大小并找出最大值所在下标 \nif(l <= nodeSum && heap[large].data < heap[l].data) {\n\tlarge = l;\n}\n// 如果存在左孩子，那么比较右孩子和当前节点的值的大小并找出最大值所在下标\nif(r <= nodeSum && heap[large].data < heap[r].data) {\n\tlarge = r;\n}\n/*\n * 如果最大值所在下标不是当前节点所在下标，那么交换两者的值\n * 交换之后，编号为 n 的节点符合最大堆的性质，\n * 但是交换之后的编号为 large 的节点不一定符合，\n * 所以需要通过递归来对编号为 large 的节点进行调整 \n */\nif(large != n) {\n\tt = heap[large].data;\n\theap[large].data = heap[n].data;\n\theap[n].data = t;\n\t// 递归对编号为 large 的节点进行调整 \n\tmaxHeap(large); \n}\n}\n\n// 删除堆顶元素，并且调整整个堆，使其仍然为一个最大堆 \nvoid eraseTop() {\n// 将最后一个堆元素提至堆顶并且将堆节点个数减 1  \nheap[1] = heap[nodeSum--]; \n// 重新调整整个堆，使其仍然为一个最大堆\nmaxHeap(1); \n}\n\n// 获取堆顶元素 \ndataType getTop() {\nreturn heap[1].data; \n} \n\n// 向堆中插入元素 \nvoid insert(Element e) {\nint i;\n// 检测堆中的元素是否已满 \nif(nodeSum >= MAX_SIZE-1) {\n\tprintf(\"堆已满，插入元素失败！\");\n\treturn ; \n}\n// 堆节点总数加 1 ，并且把新元素插入堆的末尾 \nheap[++nodeSum] = e;\n// 从下至上调整整个堆，使其仍为一个最大堆 \nfor(i = nodeSum/2; i >= 1; i--) {\n\tmaxHeap(i);\n} \n} \n\nint main() {\nint i;\nElement ele;\nele.data = 12; \n\nprintf(\"输入堆元素个数：\");\nscanf(\"%d\", &nodeSum);\nprintf(\"输入 %d 个堆元素：\\n\", nodeSum);\nfor(i = 1; i <= nodeSum; i++) {\n\tscanf(\"%d\", &heap[i].data);\n}\n\n// 向堆中插入一个元素 \ninsert(ele);\n\n// 从堆的第一个非叶子节点开始向上调整，使整个堆成为一个最大堆 \nfor(i = nodeSum/2; i >= 1; i--) {\n\tmaxHeap(i); \n} \n\n/**\n * 输出当前堆中的所有元素值，每次将堆顶元素输出，\n * 并将输出了的堆顶元素删除，重新调整堆，即为从小到大输出堆元素 \n */ \nwhile(nodeSum > 0) {\n\tprintf(\"当前堆顶元素为 %d\\n\", getTop());\n\teraseTop();\n}\n\nreturn 0;\n}\n\n\t","code_language":-1},"contentType":2},{"basicData":{"text":"\n堆的相关操作的关键在于对堆的调整，在插入、删除堆顶元素的时候调整堆，使其仍然为一个最大(最小)堆。\n\n堆可以用来对元素进行排序，即\"堆排序\"，上面的代码已经有一个\"堆排序\"的雏形了。\n\n堆的一个重要应用是取出 n 个数组元素中的前 k(k <= n) 大的数：维护一个能储存 k 个元素的最小堆，\n每次将数组元素和堆顶比较，如果堆顶元素较大，则不管，否则用这个元素代替堆顶元素，并重新调整堆...\n\n总的时间复杂度为O(n*log(k))，对于取出数组元素中的前 k 小的数也是同理。\n\n另外，C++ STL 模板中的优先队列(priority_queue)就是用的堆来实现的。\n\n最后是程序的运行结果：\n\t"},"contentType":0},{"basicData":{"image_url":"shu_10.png"},"contentType":1}]}