<?xml version="1.0" encoding="UTF-8"?>
<contents>
	<text>
二叉搜索树（Binary Search Tree）的定义： 
它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；"换行" 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；"换行" 它的左、右子树也分别为二叉搜索树。"换行" 
很明显又是一个递归的定义，定义还是挺好理解的，就是说一棵二叉树任意指定一个节点，
如果这个节点的所有左子节点都小于这个节点的值并且所有的右子节点都大于这个节点，
那么这棵二叉树就是二叉搜索树。"换行"在计算机术语中，二叉搜索树又叫二叉查找树、二叉排序树。"换行"
下面是一颗常见的二叉搜索树：
	</text>
	<img>
shu_5.png
	</img>
	<text>
既然说了是二叉搜索树，那么重点功能肯定是在搜索上面，但是在此之前我们要想想怎么去构造一个二叉搜索树。"换行"
换句话来说就是怎么向二叉搜索树中插入新的节点，假设我们要插入一个值为 n 的节点，
根据定义，首先如果根节点为空，那么直接新建节点并将数据值赋值为 n 作为根节点，否则的话就要分情况讨论："换行"
如果 n 大于当前节点的数据值，那么将 n 插入到当前节点的右子树中，如果 n 小于当前节点的数据值，
那么将 n 插入到当前节点的左子树中，如果 n 等于当前节点的数据值，那么无需插入，直接返回。"换行"
接下来是关于查找操作，有了上面的基础，做查找就简单了：假设现在需要找数据值为 n 的节点，先从根节点开始查找，
如果当前节点的数据值等于 n ，那么直接返回当前节点的指针，如果当前节点的值大于 n ，那么递归查找当前节点的左子树，
如果当前节点的值小于 n ，那么递归查找当前节点的右子树。"换行"如果当前节点指针为空，那么证明没找到。"换行"
最后是删除节点操作，这部分是最麻烦的："换行"
假设现在需要删除数据值为 n 的节点，首先，要删除节点，先得找到节点，
这里和查找操作类似，通过递归来完成，找到节点之后，我们要对节点的情况进行讨论，如图：
	</text>
	<img>
shu_6.png
	</img>
	<text>
在上图中，编号为 1 的是一种情况：要删除的节点没有左右子树，编号为 2 3 4 的是一种情况：要删除的节点存在左右子树。"换行"
我们要对这两种情况分别处理：第一种情况好办。"换行"因为没有左右子树，其实就是叶子节点，直接删除就行了；"换行"
第二种情况我们需要把要删除的节点的子树和上面"连起来"，即我们需要找到一个节点来替代这个要被删除的节点，
怎么去选择这个替代的节点呢？这里有两种选择：要删除的节点的左子树中的最右边的节点、要删除的节点的右子树中的最左边的节点。"换行"为什么要选择这两个节点呢？这个问题留给大家自己思考。"换行"最后，还需要对删除的节点是否是根节点进行处理。"换行"
关于二叉搜索树的基本操作的实现，请参考"动画"和"代码"部分。"换行""换行"
关于非递归版本的代码，可以参考这篇博客：
	</text>
	<link>
参考博客：http://blog.csdn.net/hacker_zhidian/article/details/63684783
	</link>
	<animation html_path="" animation_name="树:二叉搜索树"></animation>
	<code>

/**
* 二叉搜索树的基本操作：
* 二叉树节点储存的数据类型为 int 类型，如有需要请自行更改 
* Author：指点 
*/ 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; 

// 定义二叉树节点的结构体，包括：数据域、指向双亲节点的指针、指向左右孩子节点的指针 
typedef struct Node {
int data;
struct Node *leftChild; 
struct Node *rightChild;
}Node; 

// 定义二叉树的根节点：
Node *root = NULL; 

/* 向二叉搜索树中从 now 指向的节点的指针的地址开始，
插入数据值为 n 的新节点 */
void insert(int n, Node **now) {
// 如果根节点为空，那么直接把 n 作为根节点的数据值并结束 
if(root == NULL) {
	root = (Node *) malloc(sizeof(Node)); 
	root-&gt;leftChild = root-&gt;rightChild = NULL;
	root-&gt;data = n;
	return ;
}
// 如果当前节点指针为空，那么证明已经到达树的末尾，进行节点插入操作： 
if(*now == NULL) {
	*now = (Node *) malloc(sizeof(Node)); 
	(*now)-&gt;data = n;
	(*now)-&gt;leftChild = (*now)-&gt;rightChild = NULL; 
	return ;
}
// 如果 n 的值大于当前节点的数据值，比较节点的右孩子 
if((*now)-&gt;data &lt; n) {
	insert(n, &amp;(*now)-&gt;rightChild); 
// 如果 n 的值小于当前节点的数据值，比较节点的左孩子 
} else if((*now)-&gt;data &gt; n) {
	insert(n, &amp;(*now)-&gt;leftChild); 
// 如果相等，那么证明这个节点已经存在，直接返回 
} else {
	return ;
}
}

// 删除二叉搜索树中节点储存数据值为 n 的元素，成功返回 1 ，否则返回 0  
int eraseNode(int n, Node *now, Node *parent) {
Node *p = NULL, *del = NULL;
// 如果当前查找的节点为空，那么证明二叉搜索树中不存在值为 n 的节点，返回 0 
if(now == NULL) {
	return 0;
}
// 如果当前节点的值大于 n，那么查找左子树 
if(now-&gt;data &gt; n) {
	eraseNode(n, now-&gt;leftChild, now);
// 如果当前节点的值小于 n，那么查找右子树 
} else if(now-&gt;data &lt; n) {
	eraseNode(n, now-&gt;rightChild, now);
// 如果相等，那么证明找到了这个节点，进行删除 
} else {
	p = del = now;
	// 如果这个节点没有左右子树，即删除的是叶子节点 
	if(now-&gt;leftChild == NULL &amp;&amp; now-&gt;rightChild == NULL) {
		// 如果双亲节点不为空，那么直接把父节点对应指针置空 
		if(parent != NULL) {
			if(n &lt; parent-&gt;data) {
				parent-&gt;leftChild = NULL;
			} else {
				parent-&gt;rightChild = NULL;
			}
		}
	// 如果存在左子树或者右子树，那么进行讨论			
	} else {
		if(now-&gt;leftChild != NULL) {
			now = now-&gt;leftChild;
			// 找到左子树中的最右边的节点(右子树中值最小的节点) 
			while(now-&gt;rightChild != NULL) {
				p = now;
				now = now-&gt;rightChild;
			}
			// 将左子树中的最右边的节点顶替要删除的这个节点以保持二叉搜索树的性质 
			if(parent != NULL) {
				if(n &lt; parent-&gt;data) {
					parent-&gt;leftChild = now;
				} else {
					parent-&gt;rightChild = now;
				}
			// 删除的是根节点 
			} else {
				now-&gt;leftChild = del-&gt;leftChild;
				now-&gt;rightChild = del-&gt;rightChild; 
				root = now;
			} 
			p-&gt;rightChild = NULL;
		}else if(now-&gt;rightChild != NULL) {
			now = now-&gt;rightChild;
			// 找到右子树中的最左边的节点(左子树中值最大的节点)
			while(now-&gt;leftChild != NULL) {
				p = now;
				now = now-&gt;leftChild;
			}
			// 将右子树中的最左边的节点顶替要删除的这个节点以保持二叉搜索树的性质 
			if(parent != NULL) {
				if(n &lt; parent-&gt;data) {
					parent-&gt;leftChild = now;
				} else {
					parent-&gt;rightChild = now;
				}
			// 删除的是根节点 
			} else {
				now-&gt;leftChild = del-&gt;leftChild;
				now-&gt;rightChild = del-&gt;rightChild; 
				root = now;
			} 
			p-&gt;leftChild = NULL;
		}
		del-&gt;leftChild = del-&gt;rightChild = NULL;
		free(del);
	}
}
return 1; 
} 

// 查找节点数据值为 n 的节点，如果没找到，返回 NULL  
Node *find(int n, Node *now) {
// 如果当前查找的节点为空，那么证明没找到，返回 NULL 
if(now == NULL) {
	return NULL;
}
// 如果当前节点数据值小于 n ，那么到右子树查找 
if(n &gt; now-&gt;data) {
	find(n, now-&gt;rightChild);
// 如果当前节点数据值大于 n ，那么到左子树查找
} else if(n &lt; now-&gt;data) {
	find(n, now-&gt;leftChild); 
// 如果当前节点数据值等于 n ，那么证明找到了，返回节点指针 
} else {
	return now;
}
}

// 通过递归的方式中序遍历二叉树，在这里即为从小到大遍历二叉搜索树 
void inOrder(Node *node) {
// 如果当前节点为空，那么证明下面已经没有节点可以访问了，直接返回 
if(node == NULL) {
	return ;
} 
// 递归遍历左子树，然后输出当前节点的值，并递归遍历右子树 
inOrder(node-&gt;leftChild); 
printf("%d ", node-&gt;data);
inOrder(node-&gt;rightChild);
}



int main() {
Node *f = NULL;
 
insert(5, &amp;root); 
insert(3, &amp;root);
insert(7, &amp;root);
insert(2, &amp;root);
insert(4, &amp;root);
insert(6, &amp;root);

inOrder(root);
eraseNode(5, root, NULL);

printf("\n");
inOrder(root);

f = find(1, root);
if(f != NULL) {
	printf("\n找到数据值为 %d 的节点\n", f-&gt;data);
} else {
	printf("\n没有找到该节点\n");
} 

f = find(2, root);
if(f != NULL) {
	printf("\n找到数据值为 %d 的节点\n", f-&gt;data);
} else {
	printf("\n没有找到该节点\n");
} 

return 0;
} 
	</code>
	<text>
使用二叉搜索树来进行插入、查找、删除操作最佳的时间复杂度等于树的高度，即：O(log(n))。"换行"
C++ 的 STL 模板中的 set 集合就是在一种改进的二叉搜索树(平衡二叉树)的基础上封装的容器。"换行"
这里并不对平衡二叉树做过多的介绍。"换行"最后来看一下程序的运行结果：
	</text>
	<img>
shu_7.png
	</img>
</contents>